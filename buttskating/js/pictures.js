var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { assert } from "./assert.js";
import { Pic } from "./pic.js";
import { Point, Pointi } from "./point2.js";
export class FrameInfo {
    constructor(img, x0, y0, x1, y1, pattern) {
        this.img = img;
        this.x0 = x0;
        this.y0 = y0;
        this.x1 = x1;
        this.y1 = y1;
        this.pattern = pattern;
    }
    get width() { return this.x1 - this.x0; }
    get height() { return this.y1 - this.y0; }
}
;
export class Pictures {
    constructor(url, rectData, order) {
        this.url = url;
        this.rectData = rectData;
        this.order = order;
    }
    static fromData(data, url, patternCanvas) {
        return __awaiter(this, void 0, void 0, function* () {
            const rectData = [];
            const pOrder = [];
            for (const line of data.replace("\r\n", "\n").split("\n")) {
                if (line.length == 0)
                    continue;
                const lineAry = line.split(",");
                if (lineAry.length != 9)
                    throw ("Bad format in Pictures def file - " + url + " #" + lineAry);
                const fields = line.split(",");
                let [num, name, left, top, right, bottom, rot, hflip, vflip] = [Number.parseInt(fields[0]),
                    fields[1].substr(1, fields[1].length - 2),
                    Number.parseInt(fields[2]),
                    Number.parseInt(fields[3]),
                    Number.parseInt(fields[4]),
                    Number.parseInt(fields[5]),
                    Number.parseInt(fields[6]) * Math.PI / 180.0,
                    Number.parseInt(fields[7]),
                    Number.parseInt(fields[8])
                ];
                pOrder.push(num);
                if (!Pictures.m_imageData[name]) {
                    Pictures.m_imageData[name] = yield Pic.load("media/" + name + ".png");
                }
                let pic = Pictures.m_imageData[name];
                assert(pic);
                if (right == 0)
                    right = pic.width;
                if (bottom == 0)
                    bottom = pic.height;
                const pattern = (img) => {
                    const result = patternCanvas ? patternCanvas.createPattern(img, "repeat") : undefined;
                    assert(result !== null, "Couldn't make pattern");
                    return result !== null && result !== void 0 ? result : undefined;
                };
                if (rot || hflip != 0 || vflip != 0) {
                    const width = right - left;
                    const height = bottom - top;
                    // Rotate to get new dimensions
                    let rotpos = [
                        Point(-width / 2, -height / 2).rotated(rot),
                        Point(width / 2, -height / 2).rotated(rot),
                        Point(width / 2, height / 2).rotated(rot),
                        Point(-width / 2, height / 2).rotated(rot)
                    ];
                    const newDim = Pointi(Math.max(...rotpos.map(p => p.x)), Math.max(...rotpos.map(p => p.y))).minus(Pointi(Math.min(...rotpos.map(p => p.x)), Math.min(...rotpos.map(p => p.y))));
                    const canvas = document.createElement("canvas");
                    canvas.width = newDim.x;
                    canvas.height = newDim.y;
                    const ctx = canvas.getContext('2d');
                    assert(ctx);
                    ctx.imageSmoothingEnabled = false;
                    ctx.translate((newDim.x - width) / 2, (newDim.y - height) / 2);
                    ctx.translate(width / 2, height / 2);
                    ctx.scale(hflip ? -1 : 1, vflip ? -1 : 1);
                    ctx.rotate(rot);
                    ctx.translate(-width / 2, -height / 2);
                    ctx.drawImage(pic.img, left, top, width, height, 0, 0, width, height);
                    /*
                    g_App!.ctxCanvas.fillStyle = "white"
                    g_App!.ctxCanvas.fillRect(0, 0, g_App!.canvas.width, g_App!.canvas.height)
                    g_App!.ctxCanvas.putImageData(ctx.getImageData(0, 0, canvas.width, canvas.height), 0, 0)
                    await new Promise(resolve => setTimeout(resolve, 1000))
                    */
                    const img = yield createImageBitmap(ctx.getImageData(0, 0, canvas.width, canvas.height));
                    rectData[num] = new FrameInfo(img, 0, 0, newDim.x, newDim.y, pattern(img));
                }
                else {
                    rectData[num] = new FrameInfo(pic.img, left, top, right, bottom, pattern(pic.img));
                }
            }
            return new Pictures(url, rectData, pOrder);
        });
    }
    static load(urlTxtFile, patternCanvas) {
        return __awaiter(this, void 0, void 0, function* () {
            return fetch(urlTxtFile)
                .then(response => {
                if (response.ok)
                    return response.text();
                else
                    throw (`Failed to load '${urlTxtFile}': ${response.statusText}`);
            })
                .then(data => Pictures.fromData(data, urlTxtFile, patternCanvas))
                .catch(e => { throw (`Failed to load ${urlTxtFile}: ${e}`); });
        });
    }
    size() { return this.rectData.length; }
    getFrame(i) {
        assert(i >= 0 && i < this.rectData.length, `Unknown frame ${i} in picture ${this.url}`);
        return this.rectData[i];
    }
    getPic(s) {
        const result = Pictures.m_imageData[s];
        assert(result, "Couldn't find image " + s);
        return result;
    }
}
Pictures.m_imageData = {};
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGljdHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy9waWN0dXJlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDOUIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFLM0MsTUFBTSxPQUFPLFNBQVM7SUFDckIsWUFDWSxHQUFnQixFQUNoQixFQUFVLEVBQ1YsRUFBVSxFQUNWLEVBQVUsRUFDVixFQUFVLEVBQ1YsT0FBdUI7UUFMdkIsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUNoQixPQUFFLEdBQUYsRUFBRSxDQUFRO1FBQ1YsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUNWLE9BQUUsR0FBRixFQUFFLENBQVE7UUFDVixPQUFFLEdBQUYsRUFBRSxDQUFRO1FBQ1YsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7SUFDbEMsQ0FBQztJQUVELElBQUksS0FBSyxLQUFLLE9BQU8sSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQztJQUN4QyxJQUFJLE1BQU0sS0FBSyxPQUFPLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUM7Q0FDMUM7QUFBQSxDQUFDO0FBR0YsTUFBTSxPQUFPLFFBQVE7SUFDbkIsWUFBcUIsR0FBVyxFQUFXLFFBQXFCLEVBQVcsS0FBZTtRQUFyRSxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQVcsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQUFXLFVBQUssR0FBTCxLQUFLLENBQVU7SUFBRyxDQUFDO0lBRTlGLE1BQU0sQ0FBTyxRQUFRLENBQUMsSUFBWSxFQUFFLEdBQVcsRUFBRSxhQUF3Qzs7WUFDdkYsTUFBTSxRQUFRLEdBQUcsRUFBaUIsQ0FBQTtZ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Q0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLE1BQUssQ0FBQyxrQkFBa0IsVUFBVSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNoRSxDQUFDO0tBQUE7SUFFRixJQUFJLEtBQUssT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQSxDQUFDLENBQUM7SUFDdEMsUUFBUSxDQUFDLENBQVM7UUFDZixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsZUFBZSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUN2RixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNGLE1BQU0sQ0FBQyxDQUFTO1FBQ2YsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNwQyxNQUFNLENBQUMsTUFBTSxFQUFFLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQzs7QUFFTSxvQkFBVyxHQUF5QixFQUFFLENBQUE7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuL2Fzc2VydC5qc1wiXG5pbXBvcnQgeyBQaWMgfSBmcm9tIFwiLi9waWMuanNcIlxuaW1wb3J0IHsgUG9pbnQsIFBvaW50aSB9IGZyb20gXCIuL3BvaW50Mi5qc1wiXG5cblxuaW1wb3J0IHsgZ19BcHAgfSBmcm9tIFwiLi9hcHAuanNcIiAvLyFcblxuZXhwb3J0IGNsYXNzIEZyYW1lSW5mbyB7XG5cdGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IGltZzogSW1hZ2VCaXRtYXAsXG4gICAgcmVhZG9ubHkgeDA6IG51bWJlcixcbiAgICByZWFkb25seSB5MDogbnVtYmVyLFxuICAgIHJlYWRvbmx5IHgxOiBudW1iZXIsXG4gICAgcmVhZG9ubHkgeTE6IG51bWJlcixcbiAgICByZWFkb25seSBwYXR0ZXJuPzogQ2FudmFzUGF0dGVybilcblx0e31cblxuICBnZXQgd2lkdGgoKSB7IHJldHVybiB0aGlzLngxIC0gdGhpcy54MCB9XG4gIGdldCBoZWlnaHQoKSB7IHJldHVybiB0aGlzLnkxIC0gdGhpcy55MCB9XG59O1xuXG5cbmV4cG9ydCBjbGFzcyBQaWN0dXJlcyB7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHVybDogc3RyaW5nLCByZWFkb25seSByZWN0RGF0YTogRnJhbWVJbmZvW10sIHJlYWRvbmx5IG9yZGVyOiBudW1iZXJbXSkge31cblxuICBzdGF0aWMgYXN5bmMgZnJvbURhdGEoZGF0YTogc3RyaW5nLCB1cmw6IHN0cmluZywgcGF0dGVybkNhbnZhcz86IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IFByb21pc2U8UGljdHVyZXM+IHtcbiAgICBjb25zdCByZWN0RGF0YSA9IFtdIGFzIEZyYW1lSW5mb1tdXG4gICAgY29uc3QgcE9yZGVyID0gW10gYXMgbnVtYmVyW11cbiAgICBcblx0ICBmb3IgKGNvbnN0IGxpbmUgb2YgZGF0YS5yZXBsYWNlKFwiXFxyXFxuXCIsIFwiXFxuXCIpLnNwbGl0KFwiXFxuXCIpKVxuXHQgIHtcbiAgICAgIGlmIChsaW5lLmxlbmd0aCA9PSAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIFxuICAgICAgY29uc3QgbGluZUFyeSA9IGxpbmUuc3BsaXQoXCIsXCIpXG4gICAgICBpZiAobGluZUFyeS5sZW5ndGggIT0gOSlcblx0XHRcdCAgdGhyb3coXCJCYWQgZm9ybWF0IGluIFBpY3R1cmVzIGRlZiBmaWxlIC0gXCIgKyB1cmwgKyBcIiAjXCIgKyBsaW5lQXJ5KVxuICAgICAgXG4gICAgICBjb25zdCBmaWVsZHMgPSBsaW5lLnNwbGl0KFwiLFwiKVxuICAgICAgXG4gICAgICBsZXQgW251bSwgbmFtZSwgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tLCByb3QsIGhmbGlwLCB2ZmxpcF0gPVxuICAgICAgICBbTnVtYmVyLnBhcnNlSW50KGZpZWxkc1swXSksXG4gICAgICAgICBmaWVsZHNbMV0uc3Vic3RyKDEsIGZpZWxkc1sxXS5sZW5ndGgtMiksIC8vIHN0cmlwIHF1b3Rlc1xuICAgICAgICAgTnVtYmVyLnBhcnNlSW50KGZpZWxkc1syXSksXG4gICAgICAgICBOdW1iZXIucGFyc2VJbnQoZmllbGRzWzNdKSxcbiAgICAgICAgIE51bWJlci5wYXJzZUludChmaWVsZHNbNF0pLFxuICAgICAgICAgTnVtYmVyLnBhcnNlSW50KGZpZWxkc1s1XSksXG4gICAgICAgICBOdW1iZXIucGFyc2VJbnQoZmllbGRzWzZdKSAqIE1hdGguUEkgLyAxODAuMCxcbiAgICAgICAgIE51bWJlci5wYXJzZUludChmaWVsZHNbN10pLFxuICAgICAgICAgTnVtYmVyLnBhcnNlSW50KGZpZWxkc1s4XSlcbiAgICAgICAgXVxuICAgICAgXG5cdCAgICBwT3JkZXIucHVzaChudW0pXG5cblx0XHQgIGlmICghUGljdHVyZXMubV9pbWFnZURhdGFbbmFtZV0pXG5cdFx0ICB7XG5cdFx0XHQgIFBpY3R1cmVzLm1faW1hZ2VEYXRhW25hbWVdID0gYXdhaXQgUGljLmxvYWQoXCJtZWRpYS9cIiArIG5hbWUgKyBcIi5wbmdcIilcblx0XHQgIH1cblxuXHRcdCAgbGV0IHBpYyA9IFBpY3R1cmVzLm1faW1hZ2VEYXRhW25hbWVdXG5cdFx0ICBhc3NlcnQocGljKVxuXG5cdFx0ICBpZiAocmlnaHQgPT0gMClcblx0XHRcdCAgcmlnaHQgPSBwaWMud2lkdGhcblx0XHQgIGlmIChib3R0b20gPT0gMClcblx0XHRcdCAgYm90dG9tID0gcGljLmhlaWdodFxuXG4gICAgICBjb25zdCBwYXR0ZXJuID0gKGltZzogSW1hZ2VCaXRtYXApID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcGF0dGVybkNhbnZhcyA/IHBhdHRlcm5DYW52YXMuY3JlYXRlUGF0dGVybihpbWcsIFwicmVwZWF0XCIpIDogdW5kZWZpbmVkXG4gICAgICAgIGFzc2VydChyZXN1bHQgIT09IG51bGwsIFwiQ291bGRuJ3QgbWFrZSBwYXR0ZXJuXCIpXG4gICAgICAgIHJldHVybiByZXN1bHQgPz8gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgICBcblx0XHQgIGlmIChyb3QgfHwgaGZsaXAgIT0gMCB8fCB2ZmxpcCAhPSAwKVxuXHRcdCAge1xuICAgICAgICBjb25zdCB3aWR0aCA9IHJpZ2h0IC0gbGVmdFxuICAgICAgICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3BcbiAgICAgICAgXG4gICAgICAgIC8vIFJvdGF0ZSB0byBnZXQgbmV3IGRpbWVuc2lvbnNcbiAgICAgICAgbGV0IHJvdHBvcyA9IFtcbiAgICAgICAgICBQb2ludCgtd2lkdGggLyAyLCAtaGVpZ2h0IC8gMikucm90YXRlZChyb3QpLFxuICAgICAgICAgIFBvaW50KHdpZHRoIC8gMiwgLWhlaWdodCAvIDIpLnJvdGF0ZWQocm90KSxcbiAgICAgICAgICBQb2ludCh3aWR0aCAvIDIsIGhlaWdodCAvIDIpLnJvdGF0ZWQocm90KSxcbiAgICAgICAgICBQb2ludCgtd2lkdGggLyAyLCBoZWlnaHQgLyAyKS5yb3RhdGVkKHJvdClcbiAgICAgICAgXVxuXG4gICAgICAgIGNvbnN0IG5ld0RpbSA9XG4gICAgICAgICAgUG9pbnRpKE1hdGgubWF4KC4uLnJvdHBvcy5tYXAocCA9PiBwLngpKSwgTWF0aC5tYXgoLi4ucm90cG9zLm1hcChwID0+IHAueSkpKS5taW51cyhcbiAgICAgICAgICAgIFBvaW50aShNYXRoLm1pbiguLi5yb3Rwb3MubWFwKHAgPT4gcC54KSksIE1hdGgubWluKC4uLnJvdHBvcy5tYXAocCA9PiBwLnkpKSlcbiAgICAgICAgICApXG5cbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKVxuICAgICAgICBjYW52YXMud2lkdGggPSBuZXdEaW0ueFxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gbmV3RGltLnlcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykhXG4gICAgICAgIGFzc2VydChjdHgpXG4gICAgICAgIGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZVxuICAgICAgICBjdHgudHJhbnNsYXRlKChuZXdEaW0ueCAtIHdpZHRoKSAvIDIsIChuZXdEaW0ueSAtIGhlaWdodCkgLyAyKVxuICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMilcbiAgICAgICAgY3R4LnNjYWxlKGhmbGlwID8gLTEgOiAxLCB2ZmxpcCA/IC0xIDogMSlcbiAgICAgICAgY3R4LnJvdGF0ZShyb3QpXG4gICAgICAgIGN0eC50cmFuc2xhdGUoLXdpZHRoIC8gMiwgLWhlaWdodCAvIDIpXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UocGljLmltZywgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0KVxuXG4gICAgICAgIC8qXG4gICAgICAgIGdfQXBwIS5jdHhDYW52YXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiXG4gICAgICAgIGdfQXBwIS5jdHhDYW52YXMuZmlsbFJlY3QoMCwgMCwgZ19BcHAhLmNhbnZhcy53aWR0aCwgZ19BcHAhLmNhbnZhcy5oZWlnaHQpXG4gICAgICAgIGdfQXBwIS5jdHhDYW52YXMucHV0SW1hZ2VEYXRhKGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KSwgMCwgMClcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKVxuICAgICAgICAqL1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaW1nID0gYXdhaXQgY3JlYXRlSW1hZ2VCaXRtYXAoY3R4LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpKVxuICAgICAgICByZWN0RGF0YVtudW1dID0gbmV3IEZyYW1lSW5mbyhpbWcsIDAsIDAsIG5ld0RpbS54LCBuZXdEaW0ueSwgcGF0dGVybihpbWcpKVxuXHRcdCAgfSBlbHNlIHtcblx0XHQgICAgcmVjdERhdGFbbnVtXSA9IG5ldyBGcmFtZUluZm8ocGljLmltZywgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tLCBwYXR0ZXJuKHBpYy5pbWcpKVxuICAgICAgfVxuXHQgIH1cblxuICAgIHJldHVybiBuZXcgUGljdHVyZXModXJsLCByZWN0RGF0YSwgcE9yZGVyKVxuICB9XG4gIFxuICBzdGF0aWMgYXN5bmMgbG9hZCh1cmxUeHRGaWxlOiBzdHJpbmcsIHBhdHRlcm5DYW52YXM/OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiBQcm9taXNlPFBpY3R1cmVzPiB7XG4gICAgcmV0dXJuIGZldGNoKHVybFR4dEZpbGUpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaylcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aHJvdyhgRmFpbGVkIHRvIGxvYWQgJyR7dXJsVHh0RmlsZX0nOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YClcbiAgICAgIH0pXG4gICAgICAudGhlbihkYXRhID0+IFBpY3R1cmVzLmZyb21EYXRhKGRhdGEsIHVybFR4dEZpbGUsIHBhdHRlcm5DYW52YXMpKVxuICAgICAgLmNhdGNoKGUgPT4geyB0aHJvdyhgRmFpbGVkIHRvIGxvYWQgJHt1cmxUeHRGaWxlfTogJHtlfWApIH0pXG4gIH1cbiAgXG5cdHNpemUoKSB7IHJldHVybiB0aGlzLnJlY3REYXRhLmxlbmd0aCB9XG5cdGdldEZyYW1lKGk6IG51bWJlcikge1xuICAgIGFzc2VydChpID49IDAgJiYgaSA8IHRoaXMucmVjdERhdGEubGVuZ3RoLCBgVW5rbm93biBmcmFtZSAke2l9IGluIHBpY3R1cmUgJHt0aGlzLnVybH1gKVxuICAgIHJldHVybiB0aGlzLnJlY3REYXRhW2ldO1xuICB9XG5cdGdldFBpYyhzOiBzdHJpbmcpIHsgXG5cdFx0Y29uc3QgcmVzdWx0ID0gUGljdHVyZXMubV9pbWFnZURhdGFbc11cbiAgICBhc3NlcnQocmVzdWx0LCBcIkNvdWxkbid0IGZpbmQgaW1hZ2UgXCIgKyBzKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIG1faW1hZ2VEYXRhOiB7W2tleTogc3RyaW5nXTogUGljfSA9IHt9XG59O1xuIl19