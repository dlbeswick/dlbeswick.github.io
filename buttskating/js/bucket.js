import * as array from "./array.js";
import { assert } from "./assert.js";
// stores collision records
export class sCollide {
    constructor(first, second) {
        this.first = first;
        this.second = second;
        this.bucketID = 0;
    }
}
export var EDGE;
(function (EDGE) {
    EDGE[EDGE["EDGE_BEGIN"] = 0] = "EDGE_BEGIN";
    EDGE[EDGE["EDGE_END"] = 1] = "EDGE_END";
})(EDGE || (EDGE = {}));
;
export class sRec {
    constructor(object, val, edge) {
        this.object = object;
        this.val = val;
        this.edge = edge;
    }
    it(list) {
        const result = list.indexOf(this);
        assert(result != -1);
        return result;
    }
    lessThan(b) {
        return this.val < b.val || (this.val == b.val && this.edge < b.edge);
    }
}
// bucket class
export class Bucket {
    constructor() {
        this.m_list = []; // owner
    }
    // Add an item to the bucket.
    addItem(colSet, object, edgeBegin, edgeEnd) {
        console.assert(edgeBegin < 1000000000 && edgeBegin > -1000000000);
        console.assert(edgeEnd < 1000000000 && edgeEnd > -1000000000);
        // Insert beginning edge
        const beg = new sRec(object, -1000000000, EDGE.EDGE_BEGIN);
        this.m_list.unshift(beg);
        const outBeg = beg;
        // Insert end edge
        const end = new sRec(object, -1000000000, EDGE.EDGE_END);
        this.m_list.unshift(end);
        const outEnd = end;
        // Move edges into place
        let amt = edgeEnd + 1000000000;
        colSet = this.moveItem(colSet, end, amt);
        amt = edgeBegin + 1000000000;
        colSet = this.moveItem(colSet, beg, amt);
        return [colSet, outBeg, outEnd];
    }
    removeItem(colSet, rec) {
        this.m_list = array.remove(this.m_list, rec);
        return colSet.filter(c => c.first != rec.object && c.second != rec.object);
    }
    // Move an item a certain amount.
    moveItem(colSet, rec, amt) {
        rec.val += amt;
        // Find the direction we moved in
        if (amt < 0) {
            let it = rec.it(this.m_list);
            if (it == 0)
                return colSet;
            let prev = it - 1;
            if (this.m_list[prev].lessThan(rec))
                return colSet;
            this.m_list = array.removeIdx(this.m_list, it);
            let idx = it - 1;
            for (; idx > -1; --idx) {
                // Check if we moved past this next record, if so update collisions
                if (rec.lessThan(this.m_list[idx])) {
                    colSet = this.updateItem(colSet, this.m_list[idx], rec);
                }
                else {
                    break;
                }
            }
            this.m_list = array.insertAt(this.m_list, idx + 1, rec);
        }
        else if (amt > 0) {
            let it = rec.it(this.m_list);
            let next = it + 1;
            if (next == this.m_list.length)
                return colSet;
            if (rec.lessThan(this.m_list[next]))
                return colSet;
            this.m_list = array.removeIdx(this.m_list, it);
            let idx = it;
            for (; idx != this.m_list.length; ++idx) {
                // Check if we moved past this next record, if so update collisions
                if (this.m_list[idx].lessThan(rec)) {
                    colSet = this.updateItem(colSet, rec, this.m_list[idx]);
                }
                else {
                    break;
                }
            }
            this.m_list = array.insertAt(this.m_list, idx, rec);
        }
        return colSet;
    }
    updateItem(colSet, rec, update) {
        if (rec.edge != update.edge && rec.object != update.object) {
            // End edge is always moved last, edges always moved in pairs, so BEGIN is used to
            // delete the old record and END used to add the new one
            if (rec.edge == EDGE.EDGE_END) {
                if (update.object == this.m_ghost) {
                    let swap = rec;
                    rec = update;
                    update = swap;
                }
                if (this.m_ghost && rec.object != this.m_ghost)
                    return colSet;
                let col = colSet.find(c => c.first == rec.object && c.second == update.object);
                if (!col) {
                    col = new sCollide(rec.object, update.object);
                    colSet.push(col);
                }
                ++col.bucketID;
            }
            else {
                if (update.object == this.m_ghost) {
                    let swap = rec;
                    rec = update;
                    update = swap;
                }
                if (this.m_ghost && rec.object != this.m_ghost)
                    return colSet;
                let col = colSet.find(c => c.first == rec.object && c.second == update.object);
                if (col) {
                    if (!col.bucketID) {
                        colSet = array.remove(colSet, col);
                    }
                    else {
                        --col.bucketID;
                    }
                }
            }
        }
        return colSet;
    }
    clear() { this.setGhost(undefined); }
    setGhost(obj) { this.m_ghost = obj; }
    save() { throw ("Not implemented"); }
    loadBinary(stream, resolveMap) {
        this.clear();
        let size = stream.uint;
        for (let i = 0; i < size; i++) {
            const ptr = stream.int;
            const obj = resolveMap.get(ptr);
            if (obj == undefined) {
                throw ("Collision data corrupt - no matching pointer found.");
            }
            const r = new sRec(obj, stream.int, stream.char);
            this.m_list.push(r);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,