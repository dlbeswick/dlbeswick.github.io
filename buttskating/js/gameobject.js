var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { assert } from "./assert.js";
import { Pictures } from "./pictures.js";
import { Point2 } from "./point2.js";
import { AABBTester } from "./aabbtester.js";
export class GameObject {
    constructor() {
        this.m_vel = new Point2();
        this.m_pos = new Point2();
        this.m_size = new Point2();
        this.m_animLoopStart = 0;
        this.m_animDone = false;
        this.m_oldCollidePos = new Point2();
        // We need to keep track of our collision records
        this.m_record = new Array(4);
        console.assert(GameObject.m_pCollide != undefined);
        this.m_speed = 0;
        this.m_frame = 0;
        this.m_animPos = 0;
        this.m_animSpeed = 0;
        this.m_animPtr = [];
        this.m_animNum = 0;
        this.m_animPriority = -1;
        this.m_scale = 1.0;
        this.m_layer = 0;
        this.m_bDrawToLayer = true;
    }
    gameMapHit(sx, sy, ex, ey) { return false; }
    getLayerDraw() { return this.m_bDrawToLayer; }
    animDone() { return this.m_animDone; }
    handleCollide(a, b) { }
    destroy() {
        if (this.m_record[0]) {
            GameObject.m_pCollide.removeObj(this.m_record);
            this.m_record = [undefined, undefined, undefined, undefined];
        }
    }
    static initStatic() {
        return __awaiter(this, void 0, void 0, function* () {
            console.assert(!GameObject.m_pCollide);
            GameObject.m_pCollide = new AABBTester();
            // Load sprite coords
            GameObject.m_pictures = yield Pictures.load('media/sprites.txt');
            // Load anim data
            this.m_anims = yield fetch('media/anim.json')
                .then(response => response.json())
                .then(data => data)
                .catch(error => { throw ("Failed to load media/anim.txt: " + error); });
        });
    }
    get rotation() { return 0; }
    draw(ctx) {
        assert(GameObject.m_pictures);
        const f = GameObject.m_pictures.getFrame(this.m_frame);
        ctx.translate(this.m_pos.x - f.width / 2, this.m_pos.y - f.height / 2);
        ctx.translate(f.width / 2, f.height / 2);
        ctx.scale(this.m_scale, this.m_scale);
        ctx.rotate(this.rotation);
        ctx.translate(-f.width / 2, -f.height / 2);
        assert(GameObject.m_pictures);
        ctx.drawImage(f.img, f.x0, f.y0, f.width, f.height, 0, 0, f.width, f.height);
    }
    setAnim(anim, speed, priority = -1) {
        const newAnim = GameObject.m_anims[anim];
        console.assert(newAnim != undefined);
        if (newAnim == this.m_animPtr) {
            this.m_animSpeed = speed;
            this.m_animPriority = priority;
            return;
        }
        if (priority >= this.m_animPriority) {
            this.m_animPtr = newAnim;
            // position at start
            this.m_animPos = 0;
            this.m_animNum = this.m_animPtr.length;
            this.m_animSpeed = speed;
            this.m_animLoopStart = 0;
            this.m_animPriority = priority;
            if (this.m_animPtr[Math.floor(this.m_animPos)] == -2) {
                this.m_animPos++;
                this.m_animLoopStart = this.m_animPos;
            }
            this.m_frame = this.m_animPtr[Math.floor(this.m_animPos)];
            assert(this.m_frame != undefined);
        }
    }
    animate() {
        console.assert(this.m_animPtr != undefined);
        this.m_animDone = false;
        if (this.m_animPos >= this.m_animNum) {
            if (this.m_animLoopStart) {
                this.m_animPos = this.m_animLoopStart;
            }
            else {
                this.m_animPos = this.m_animNum - 1;
                this.m_animDone = true;
            }
        }
        if (this.m_animPtr[Math.floor(this.m_animPos)] == -2) {
            this.m_animPos++;
            this.m_animLoopStart = this.m_animPos;
        }
        this.m_frame = this.m_animPtr[Math.floor(this.m_animPos)];
        assert(this.m_frame != undefined);
        this.m_animPriority = -1;
        this.m_animPos += this.m_animSpeed;
    }
    enterCollisionSystem() {
        this.m_record = GameObject.m_pCollide.addObj(this);
    }
    beginMove() {
        this.m_oldCollidePos = this.m_pos;
    }
    endMove() {
        assert(this.m_record[0] != undefined);
        GameObject.m_pCollide.moveObj(this, this.m_pos.minus(this.m_oldCollidePos), this.m_record);
    }
}
//# sourceMappingURL=data:application/json;base64,