import { assert } from "../assert.js";
import { GameObject } from "../gameobject.js";
import { Point } from "../point2.js";
import { g_App } from "../app.js";
import { Particle, PARTICLE_TYPE } from "./particle.js";
import { Player } from "./player.js";
var CAR_STATE;
(function (CAR_STATE) {
    CAR_STATE[CAR_STATE["PARKED"] = 0] = "PARKED";
    CAR_STATE[CAR_STATE["ACCELERATING"] = 1] = "ACCELERATING";
    CAR_STATE[CAR_STATE["STOPPING"] = 2] = "STOPPING";
    CAR_STATE[CAR_STATE["STOPPED"] = 3] = "STOPPED";
})(CAR_STATE || (CAR_STATE = {}));
;
export class Car extends GameObject {
    constructor(x, y, dir) {
        super();
        // Positions
        this.m_smokePos = Point(0, 0);
        this.m_smokeDir = Point(0, 0);
        this.m_smokeMag = Point(0, 0);
        this.m_bboxTL = Point(0, 0);
        this.m_bboxBR = Point(0, 0);
        this.m_pos = Point(x, y);
        this.m_dir = dir;
        this.m_frame = 33;
        this.m_state = CAR_STATE.PARKED;
        this.m_smoke = g_App.irand(0, 4);
        this.m_idle = g_App.irand(0, 7);
        assert(GameObject.m_pictures);
        switch (this.m_dir) {
            case 0:
                this.m_vel = Point(0, -1);
                this.m_bboxTL.x = -GameObject.m_pictures.getFrame(this.m_frame).width * 0.5;
                this.m_bboxTL.y = 0;
                this.m_bboxBR.x = GameObject.m_pictures.getFrame(this.m_frame).width * 0.5;
                this.m_bboxBR.y = 480;
                break;
            case 1:
                this.m_vel = Point(1, 0);
                this.m_bboxTL.x = -480;
                this.m_bboxTL.y = -GameObject.m_pictures.getFrame(this.m_frame).height * 0.5;
                this.m_bboxBR.x = 0;
                this.m_bboxBR.y = GameObject.m_pictures.getFrame(this.m_frame).height * 0.5;
                break;
            case 2:
                this.m_vel = Point(0, 1);
                this.m_bboxTL.x = -GameObject.m_pictures.getFrame(this.m_frame).width * 0.5;
                this.m_bboxTL.y = -480;
                this.m_bboxBR.x = GameObject.m_pictures.getFrame(this.m_frame).width * 0.5;
                this.m_bboxBR.y = 0;
                break;
            case 3:
                this.m_vel = Point(-1, 0);
                this.m_bboxTL.x = 0;
                this.m_bboxTL.y = -GameObject.m_pictures.getFrame(this.m_frame).height * 0.5;
                this.m_bboxBR.x = 480;
                this.m_bboxBR.y = GameObject.m_pictures.getFrame(this.m_frame).height * 0.5;
                break;
            default:
                throw ("Invalid direction for car");
        }
        this.m_smokePos.x = -15;
        this.m_smokePos.y = -GameObject.m_pictures.getFrame(this.m_frame).height * 0.5;
        this.m_smokePos = this.m_smokePos.vecRotated(this.m_vel);
        this.m_smokePos.x *= -1;
        this.m_smokeDir.x = -0.5;
        this.m_smokeDir.y = -0.5;
        this.m_smokeMag.x = 1;
        this.m_smokeMag.y = -4;
        this.m_smokeDir = this.m_smokeDir.vecRotated(this.m_vel);
        this.m_smokeMag = this.m_smokeMag.vecRotated(this.m_vel);
        this.m_smokeDir.x *= -1;
        this.m_smokeMag.x *= -1;
        // Car moves opposite to direction it's facing
        this.m_vel.sMulEq(-1);
    }
    draw(ctx) {
        this.m_idle++;
        const offset = Car.m_idleOffsets[this.m_idle % 7];
        ctx.translate(offset.x, offset.y);
        super.draw(ctx);
    }
    gameUpdate() {
        this.m_smoke++;
        if (this.m_smoke % 4 == 0) {
            const vel = Point(g_App.frand(this.m_smokeDir.x, this.m_smokeMag.x), g_App.frand(this.m_smokeDir.y, this.m_smokeMag.y));
            g_App.add(new Particle(this.m_pos.x + this.m_smokePos.x, this.m_pos.y + this.m_smokePos.y, "PARTICLE_SMOKE", 1, PARTICLE_TYPE.STD, vel, 0));
        }
        if (this.m_state == CAR_STATE.PARKED) {
            // If we have detected a player, race out
            for (let i = 0; i < Player.getNumPlayers(); i++) {
                const pPlayer = Player.getPlayer(i);
                assert(pPlayer != undefined);
                if (g_App.pointBox(pPlayer.m_pos.x, pPlayer.m_pos.y, this.m_pos.x + this.m_bboxTL.x, this.m_pos.y + this.m_bboxTL.y, this.m_pos.x + this.m_bboxBR.x, this.m_pos.y + this.m_bboxBR.y)) {
                    this.m_state = CAR_STATE.ACCELERATING;
                }
            }
        }
        else if (this.m_state == CAR_STATE.ACCELERATING) {
            this.m_speed += 0.35;
            this.m_pos.plusEq(this.m_vel.sMul(this.m_speed));
            if (this.m_speed >= 8)
                this.m_state = CAR_STATE.STOPPING;
        }
        else if (this.m_state == CAR_STATE.STOPPING) {
            this.m_speed -= 0.25;
            this.m_pos.plusEq(this.m_vel.sMul(this.m_speed));
            if (this.m_speed <= 0)
                this.m_state = CAR_STATE.STOPPED;
        }
        return true;
    }
    get rotation() {
        return -this.m_vel.y > 0 ? Math.asin(this.m_vel.x) : -Math.PI - Math.asin(this.m_vel.x);
    }
}
Car.m_idleOffsets = [
    Point(0, 2),
    Point(1, 1),
    Point(1, 0),
    Point(2, 0),
    Point(2, 0),
    Point(0, 1),
    Point(0, 1)
];
//# sourceMappingURL=data:application/json;base64,