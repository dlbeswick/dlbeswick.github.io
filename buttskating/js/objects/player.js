import { assert } from "../assert.js";
import { GameObject } from "../gameobject.js";
import { Point } from "../point2.js";
import { Particle, PARTICLE_TYPE } from "./particle.js";
import { g_App } from "../app.js";
var PLAYER_STATE;
(function (PLAYER_STATE) {
    PLAYER_STATE[PLAYER_STATE["SKATE"] = 0] = "SKATE";
    PLAYER_STATE[PLAYER_STATE["FALL"] = 1] = "FALL";
    PLAYER_STATE[PLAYER_STATE["DEAD"] = 2] = "DEAD";
})(PLAYER_STATE || (PLAYER_STATE = {}));
;
export class Player extends GameObject {
    constructor(x, y) {
        super();
        this.MAX_SKATE_SPEED = 8.0;
        this.MAX_PUSH_SPEED = 5.0;
        this.MAX_PUSH_BACK_SPEED = -2.5;
        this.m_oldpos = Point(0, 0);
        this.m_fallX = 0;
        this.m_fallY = 0;
        this.m_boundOffset = new Array(2);
        this.m_ctrlStruct = { bUp: false, bDown: false, bLeft: false, bRight: false, bFire1: false, bFire2: false };
        if (Player.m_numPlayers >= Player.MAX_PLAYERS)
            throw ("Too many players");
        this.m_lastdir = 0;
        this.m_rotvel = 0;
        this.setAnim("SKATE_STRAIGHT", 0);
        this.m_boundOffset[0] = 0;
        this.m_boundOffset[1] = 0;
        this.m_pos.x = x;
        this.m_pos.y = y;
        this.m_vel.x = 0;
        this.m_vel.y = 1;
        this.m_state = PLAYER_STATE.SKATE;
        this.m_scaleVel = 0;
        if (Player.m_numPlayers > 0)
            this.m_control = 99;
        else
            this.m_control = 0;
        Player.m_playerList[Player.m_numPlayers] = this;
        Player.m_numPlayers++;
    }
    destroy() {
        for (let i = 0; i < Player.m_numPlayers; i++) {
            if (Player.m_playerList[i] == this)
                Player.m_playerList[i] = undefined;
        }
        Player.m_numPlayers--;
    }
    // Fill in the control structure according to control type
    getCtrl() {
        this.m_ctrlStruct = {
            bUp: false,
            bDown: false,
            bLeft: false,
            bRight: false,
            bFire1: false,
            bFire2: false
        };
        if (this.m_control == 0) // Player
         {
            const pIn = g_App.m_input;
            this.m_ctrlStruct.bUp = pIn.key("ArrowUp");
            this.m_ctrlStruct.bDown = pIn.key("ArrowDown");
            this.m_ctrlStruct.bLeft = pIn.key("ArrowLeft");
            this.m_ctrlStruct.bRight = pIn.key("ArrowRight");
            this.m_ctrlStruct.bFire1 = pIn.key("J");
        }
        else if (this.m_control == 99) // AI
         {
            this.doAI();
        }
    }
    // Move this player character according to AI routines
    doAI() {
        const ahead = this.m_vel.sMul(this.m_speed).sMul(75.0);
        const sx = this.m_pos.x;
        const sy = this.m_pos.y;
        const ex = this.m_pos.x + ahead.x;
        const ey = this.m_pos.y + ahead.y;
        // Get the list of possible collisions
        const cList = g_App.m_map.getCollideLines(this.m_pos.x, this.m_pos.y, 0);
        // Check for a collision and avoid
        for (const c of cList) {
            if (g_App.lineLine(c.sx, c.sy, c.ex, c.ey, sx, sy, ex, ey)) {
                // find which side of the line we're on
                const dot = ((this.m_pos.x - sx) * (ex - sx) + (this.m_pos.x - sx) * (ey - sy));
                if (dot >= 0.0) {
                    this.m_ctrlStruct.bRight = true;
                }
                else {
                    this.m_ctrlStruct.bLeft = true;
                }
                return;
            }
        }
    }
    // Update player
    gameUpdate() {
        this.m_oldpos = this.m_pos;
        this.getCtrl();
        // Gravity
        // Scaling rep. of player
        this.m_scale = (this.m_layer * 0.025) + 1.0;
        if (this.m_state == PLAYER_STATE.SKATE) {
            // Test against map
            g_App.m_map.affectObject(this);
            if (this.m_ctrlStruct.bUp) {
                this.m_lastdir = 0;
                // brake or push
                if (this.m_speed < 0) {
                    this.setAnim("PLAYER_BRAKE", 0.25, 10);
                    this.m_speed += 0.25;
                    if (this.m_speed > 0)
                        this.m_speed = 0;
                }
                else {
                    this.setAnim("PLAYER_PUSH", 0.15, 10);
                    if (this.m_speed < 2.5) {
                        this.m_speed += 0.02;
                        if (this.m_speed > this.MAX_PUSH_SPEED)
                            this.m_speed = this.MAX_PUSH_SPEED;
                    }
                }
            }
            else if (this.m_ctrlStruct.bDown) {
                this.m_lastdir = 0;
                // brake or push
                if (this.m_speed > 0) {
                    this.setAnim("PLAYER_BRAKE", 0.25, 10);
                    this.m_speed -= 0.25;
                    if (this.m_speed < 0)
                        this.m_speed = 0;
                }
                else {
                    this.setAnim("PLAYER_PUSH_BACK", 0.15, 10);
                    if (this.m_speed > this.MAX_PUSH_BACK_SPEED)
                        this.m_speed -= 0.02;
                }
            }
            const turnVec = Point(-this.m_vel.y, this.m_vel.x);
            if (this.m_ctrlStruct.bLeft) {
                if (this.m_lastdir == 6)
                    this.m_rotvel = 0;
                this.setAnim("LEAN_LEFT", 0.25, 5);
                this.m_rotvel += 0.0001;
                if (this.m_rotvel < -1)
                    this.m_rotvel = -1;
                this.m_lastdir = 4;
                this.m_vel.minusEq(turnVec.sMul(this.m_rotvel).sMul(this.m_speed));
            }
            else if (this.m_ctrlStruct.bRight) {
                if (this.m_lastdir == 4)
                    this.m_rotvel = 0;
                this.setAnim("LEAN_RIGHT", 0.25, 5);
                this.m_rotvel -= 0.0001;
                if (this.m_rotvel > 1)
                    this.m_rotvel = 1;
                this.m_lastdir = 6;
                this.m_vel.minusEq(turnVec.sMul(this.m_rotvel).sMul(this.m_speed));
            }
            else {
                if (this.m_lastdir == 4)
                    this.setAnim("LEAN_LEFTREV", 0.25, 5);
                if (this.m_lastdir == 6)
                    this.setAnim("LEAN_RIGHTREV", 0.25, 5);
                this.m_lastdir = 0;
                this.m_rotvel = 0;
            }
            if (this.m_ctrlStruct.bFire1) {
                //m_vel[2] = 0.5f;
            }
            if (this.m_speed > this.MAX_SKATE_SPEED)
                this.m_speed = this.MAX_SKATE_SPEED;
            if (this.m_speed < -this.MAX_SKATE_SPEED)
                this.m_speed = -this.MAX_SKATE_SPEED;
            this.setAnim("SKATE_STRAIGHT", this.m_speed * 0.1, -1);
            this.m_vel.normalise();
            this.m_pos.plusEq(this.m_vel.sMul(this.m_speed));
            // Test collision
            g_App.m_map.hitTestObject(this);
        }
        else if (this.m_state == PLAYER_STATE.FALL) {
            this.setAnim("PLAYER_ROLL", 0.25);
            this.m_pos.plusEq(this.m_vel.sMul(this.m_speed));
            this.m_scale += this.m_scaleVel;
            this.m_scaleVel -= 0.05;
            if (this.m_scale < 1.0) {
                this.m_scale = 1.0;
                this.m_state = PLAYER_STATE.DEAD;
            }
        }
        else if (this.m_state == PLAYER_STATE.DEAD) {
            this.setAnim("PLAYER_DEAD", 0.01);
            if (this.animDone()) {
                this.m_pos.x = this.m_fallX;
                this.m_pos.y = this.m_fallY;
                this.m_speed = 0;
                this.m_state = PLAYER_STATE.SKATE;
                g_App.add(new Particle(this.m_pos.x, this.m_pos.y, "SPARK_SMALL", 0.01, PARTICLE_TYPE.LINGER));
                g_App.add(new Particle(this.m_pos.x, this.m_pos.y, "SPARK_SMALL", 0.01, PARTICLE_TYPE.LINGER));
                g_App.add(new Particle(this.m_pos.x, this.m_pos.y, "SPARK_SMALL", 0.01, PARTICLE_TYPE.LINGER));
                g_App.add(new Particle(this.m_pos.x, this.m_pos.y, "SPARK_SMALL", 0.01, PARTICLE_TYPE.LINGER));
                g_App.add(new Particle(this.m_pos.x, this.m_pos.y, "SPARK_SMALL", 0.01, PARTICLE_TYPE.LINGER));
            }
        }
        // move map according to player
        if (this.m_control != 99) {
            g_App.m_map.m_targetX = this.m_pos.x - 320 + (this.m_vel.x * this.m_speed * 0.25) * 100;
            g_App.m_map.m_targetY = this.m_pos.y - 240 + (this.m_vel.y * this.m_speed * 0.25) * 75;
        }
        this.animate();
        return true;
    }
    gameMapHit(sx, sy, ex, ey) {
        const hit = g_App.circleLine(this.m_pos.x, this.m_pos.y, 20, sx, sy, ex, ey);
        if (hit) {
            // Move player just past the line
            const length = Math.sqrt((this.m_pos.x - hit.x) * (this.m_pos.x - hit.x) + (this.m_pos.y - hit.y) * (this.m_pos.y - hit.y));
            const vector = Point((this.m_pos.x - hit.x) / length, (this.m_pos.y - hit.y) / length);
            this.m_pos.x = hit.x + (vector.x * 21);
            this.m_pos.y = hit.y + (vector.y * 21);
            if (this.m_speed > 0) {
                this.m_speed -= 0.25;
                if (this.m_speed < 0)
                    this.m_speed = 0;
            }
            else {
                this.m_speed += 0.25;
                if (this.m_speed > 0)
                    this.m_speed = 0;
            }
            // Make sparks
            g_App.add(new Particle(hit.x, hit.y, "SPARK_SMALL", 0.1));
            g_App.add(new Particle(hit.x, hit.y, "SPARK_SMALL", 0.1));
            g_App.add(new Particle(hit.x, hit.y, "SPARK_SMALL", 0.1));
            // If we're going really fast then fall off
            if (this.m_speed >= 5.5) {
                // Reposition ourselves on the track
                this.m_pos.x = hit.x + (vector.x * 80);
                this.m_pos.y = hit.y + (vector.y * 80);
                this.m_state = PLAYER_STATE.FALL;
                this.m_fallX = this.m_pos.x;
                this.m_fallY = this.m_pos.y;
                this.m_pos.x = hit.x;
                this.m_pos.y = hit.y;
                this.m_scaleVel = 0.5;
            }
            return true;
        }
        return false;
    }
    get rotation() {
        return this.m_vel.y > 0 ? Math.asin(-this.m_vel.x) : -Math.PI - Math.asin(-this.m_vel.x);
    }
    // return the indexed player
    static getPlayer(idx) {
        assert(idx >= 0 && idx < Player.m_numPlayers);
        return Player.m_playerList[idx];
    }
    // Return # of active players
    static getNumPlayers() {
        return Player.m_numPlayers;
    }
}
Player.MAX_PLAYERS = 4;
Player.m_numPlayers = 0;
Player.m_playerList = new Array(Player.MAX_PLAYERS);
//# sourceMappingURL=data:application/json;base64,