import { GameObject } from "../gameobject.js";
import { Point } from "../point2.js";
import { g_App } from "../app.js";
export var PARTICLE_TYPE;
(function (PARTICLE_TYPE) {
    PARTICLE_TYPE[PARTICLE_TYPE["STD"] = 0] = "STD";
    PARTICLE_TYPE[PARTICLE_TYPE["LINGER"] = 1] = "LINGER";
    PARTICLE_TYPE[PARTICLE_TYPE["DAMPER"] = 2] = "DAMPER";
})(PARTICLE_TYPE || (PARTICLE_TYPE = {}));
;
export class Particle extends GameObject {
    constructor(x, y, anim, speed, type = PARTICLE_TYPE.STD, vel = Point(0, 0), scaleVel = 0.0) {
        super();
        this.m_rotvel = 0;
        this.m_type = type;
        this.m_pos.x = x;
        this.m_pos.y = y;
        this.m_vel = vel;
        this.m_scalevel = scaleVel;
        this.m_speed = 1.0;
        if (type == PARTICLE_TYPE.LINGER) {
            this.m_vel.x = 0;
            this.m_vel.y = 0;
            this.m_rotvel = -0.1 + g_App.frand() * 0.2;
            this.m_scalevel = g_App.frand() * 0.025;
        }
        else if (type == PARTICLE_TYPE.DAMPER) {
            length = this.m_vel.length;
            this.m_speed = length;
            if (length > 0)
                this.m_vel.sDivEq(length);
        }
        this.setAnim(anim, speed);
        this.m_bDrawToLayer = false;
    }
    gameUpdate() {
        this.m_pos.plusEq(this.m_vel.sMul(this.m_speed));
        this.m_scale += this.m_scalevel;
        if (this.m_type == PARTICLE_TYPE.LINGER) {
            //m_vel[0] = g_App->Sin(m_rot);
            //m_vel[1] = g_App->Cos(m_rot);
            //		m_rot += m_rotvel;
        }
        else if (this.m_type == PARTICLE_TYPE.DAMPER) {
            if (this.m_speed > 0)
                this.m_speed -= 0.1;
            else
                this.m_speed += 0.1;
        }
        this.animate();
        return !this.animDone();
    }
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy9vYmplY3RzL3BhcnRpY2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUM3QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFakMsTUFBTSxDQUFOLElBQVksYUFLWDtBQUxELFdBQVksYUFBYTtJQUV4QiwrQ0FBRyxDQUFBO0lBQ0gscURBQU0sQ0FBQTtJQUNOLHFEQUFNLENBQUE7QUFDUCxDQUFDLEVBTFcsYUFBYSxLQUFiLGFBQWEsUUFLeEI7QUFBQSxDQUFDO0FBRUYsTUFBTSxPQUFPLFFBQVMsU0FBUSxVQUFVO0lBRXZDLFlBQVksQ0FBUyxFQUFFLENBQVMsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLElBQUksR0FBRyxhQUFhLENBQUMsR0FBRyxFQUMxRSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEdBQUcsR0FBRztRQUMzQyxLQUFLLEVBQUUsQ0FBQTtRQXdEVixhQUFRLEdBQVcsQ0FBQyxDQUFBO1FBdkRsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUVuQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1FBRW5CLElBQUksSUFBSSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQ2hDO1lBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDNUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO1NBQ3pDO2FBQ0ksSUFBSSxJQUFJLElBQUksYUFBYSxDQUFDLE1BQU0sRUFDckM7WUFDQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDdEIsSUFBSSxNQUFNLEdBQUcsQ0FBQztnQkFDYixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTFCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFHRixVQUFVO1FBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRWhDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQUMsTUFBTSxFQUN2QztZQUNDLCtCQUErQjtZQUMvQiwrQkFBK0I7WUFFN0Isc0JBQXNCO1NBQ3hCO2FBQ0ksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQzVDO1lBQ0MsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDOztnQkFFcEIsSUFBSSxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUM7U0FDckI7UUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFZixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FNRjtBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSBcIi4uL2dhbWVvYmplY3QuanNcIlxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi4vcG9pbnQyLmpzXCJcbmltcG9ydCB7IGdfQXBwIH0gZnJvbSBcIi4uL2FwcC5qc1wiXG5cbmV4cG9ydCBlbnVtIFBBUlRJQ0xFX1RZUEVcbntcblx0U1RELFxuXHRMSU5HRVIsXG5cdERBTVBFUlxufTtcblxuZXhwb3J0IGNsYXNzIFBhcnRpY2xlIGV4dGVuZHMgR2FtZU9iamVjdFxue1xuXHRjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgYW5pbTogc3RyaW5nLCBzcGVlZDogbnVtYmVyLCB0eXBlID0gUEFSVElDTEVfVFlQRS5TVEQsXG4gICAgICAgICAgICAgIHZlbCA9IFBvaW50KDAsIDApLCBzY2FsZVZlbCA9IDAuMCkge1xuICAgIHN1cGVyKClcblx0ICB0aGlzLm1fdHlwZSA9IHR5cGU7XG5cblx0ICB0aGlzLm1fcG9zLnggPSB4O1xuXHQgIHRoaXMubV9wb3MueSA9IHk7XG5cdCAgdGhpcy5tX3ZlbCA9IHZlbDtcblx0ICB0aGlzLm1fc2NhbGV2ZWwgPSBzY2FsZVZlbDtcblx0ICB0aGlzLm1fc3BlZWQgPSAxLjA7XG5cblx0ICBpZiAodHlwZSA9PSBQQVJUSUNMRV9UWVBFLkxJTkdFUilcblx0ICB7XG5cdFx0ICB0aGlzLm1fdmVsLnggPSAwO1xuXHRcdCAgdGhpcy5tX3ZlbC55ID0gMDtcblx0XHQgIHRoaXMubV9yb3R2ZWwgPSAtMC4xICsgZ19BcHAhLmZyYW5kKCkgKiAwLjI7XG5cdFx0ICB0aGlzLm1fc2NhbGV2ZWwgPSBnX0FwcCEuZnJhbmQoKSAqIDAuMDI1O1xuXHQgIH1cblx0ICBlbHNlIGlmICh0eXBlID09IFBBUlRJQ0xFX1RZUEUuREFNUEVSKVxuXHQgIHtcblx0XHQgIGxlbmd0aCA9IHRoaXMubV92ZWwubGVuZ3RoO1xuXHRcdCAgdGhpcy5tX3NwZWVkID0gbGVuZ3RoO1xuXHRcdCAgaWYgKGxlbmd0aCA+IDApXG5cdFx0XHQgIHRoaXMubV92ZWwuc0RpdkVxKGxlbmd0aCk7XG5cdCAgfVxuXG5cdCAgdGhpcy5zZXRBbmltKGFuaW0sIHNwZWVkKTtcblxuXHQgIHRoaXMubV9iRHJhd1RvTGF5ZXIgPSBmYWxzZTtcbiAgfVxuXG5cblx0Z2FtZVVwZGF0ZSgpIHtcblx0ICB0aGlzLm1fcG9zLnBsdXNFcSh0aGlzLm1fdmVsLnNNdWwodGhpcy5tX3NwZWVkKSk7XG5cdCAgdGhpcy5tX3NjYWxlICs9IHRoaXMubV9zY2FsZXZlbDtcblxuXHQgIGlmICh0aGlzLm1fdHlwZSA9PSBQQVJUSUNMRV9UWVBFLkxJTkdFUilcblx0ICB7XG5cdFx0ICAvL21fdmVsWzBdID0gZ19BcHAtPlNpbihtX3JvdCk7XG5cdFx0ICAvL21fdmVsWzFdID0gZ19BcHAtPkNvcyhtX3JvdCk7XG5cbiAgICAgIC8vXHRcdG1fcm90ICs9IG1fcm90dmVsO1xuXHQgIH1cblx0ICBlbHNlIGlmICh0aGlzLm1fdHlwZSA9PSBQQVJUSUNMRV9UWVBFLkRBTVBFUilcblx0ICB7XG5cdFx0ICBpZiAodGhpcy5tX3NwZWVkID4gMClcblx0XHRcdCAgdGhpcy5tX3NwZWVkIC09IDAuMTtcblx0XHQgIGVsc2Vcblx0XHRcdCAgdGhpcy5tX3NwZWVkICs9IDAuMTtcblx0ICB9XG5cblx0ICB0aGlzLmFuaW1hdGUoKTtcblx0ICBcblx0ICByZXR1cm4gIXRoaXMuYW5pbURvbmUoKTtcbiAgfVxuXG5cblx0bV9zY2FsZXZlbDogbnVtYmVyXG5cdG1fcm90dmVsOiBudW1iZXIgPSAwXG5cdG1fdHlwZTogUEFSVElDTEVfVFlQRVxufTtcbiJdfQ==