var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { assert } from './assert.js';
import { Pictures } from './pictures.js';
import { Point } from './point2.js';
import { g_App } from './app.js';
var TRANSITION_STATE;
(function (TRANSITION_STATE) {
    TRANSITION_STATE[TRANSITION_STATE["IDLE"] = 0] = "IDLE";
    TRANSITION_STATE[TRANSITION_STATE["INIT"] = 1] = "INIT";
    TRANSITION_STATE[TRANSITION_STATE["TRANSIN"] = 2] = "TRANSIN";
    TRANSITION_STATE[TRANSITION_STATE["WAITING"] = 3] = "WAITING";
    TRANSITION_STATE[TRANSITION_STATE["TRANSOUT"] = 4] = "TRANSOUT";
    TRANSITION_STATE[TRANSITION_STATE["DONE"] = 5] = "DONE";
})(TRANSITION_STATE || (TRANSITION_STATE = {}));
export class Transition {
    constructor() {
        this.NONE = 0;
        this.SPIRALBLOCKS = 1;
        this.BMPFADE = 2;
        this.m_appState = 0;
        this.m_state = TRANSITION_STATE.IDLE;
        this.m_method = this.NONE;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.m_pictures = yield Pictures.load("media/transition.txt");
            this.m_pictures = this.m_pictures;
        });
    }
    goTransition(method, targetAppState, after) {
        Transition.m_bIsBusy = true;
        this.m_method = method;
        this.m_state = TRANSITION_STATE.INIT;
        this.m_appState = targetAppState;
        if (this.m_method == this.SPIRALBLOCKS) {
            this.m_func = this.doSpiralBlocks(after);
        }
        else if (this.m_method == this.BMPFADE) {
            this.m_func = this.doBMPFade(after);
        }
        else {
            assert(false);
        }
    }
    update() {
        if (this.m_state == TRANSITION_STATE.IDLE || this.m_method == this.NONE)
            return;
        const before = this.m_state;
        if (this.m_func)
            this.m_state = this.m_func(this.m_state);
        if (before != TRANSITION_STATE.TRANSOUT && this.m_state == TRANSITION_STATE.TRANSOUT) {
            Transition.m_bIsBusy = false;
            g_App.stateChange(this.m_appState);
        }
        if (this.m_state == TRANSITION_STATE.DONE) {
            this.m_state = TRANSITION_STATE.IDLE;
            this.m_method = this.NONE;
            this.m_func = undefined;
        }
    }
    isBusy() { return Transition.m_bIsBusy; }
    doSpiralBlocks(after) {
        let blocks = [];
        let dir;
        let count;
        assert(this.m_pictures);
        let g_pictures = this.m_pictures.rectData;
        let waiting = true;
        after.then(() => waiting = false).catch(() => waiting = false);
        return (state) => {
            if (state == TRANSITION_STATE.INIT) {
                blocks.length = 0;
                blocks.push(Point(0, 0));
                dir = 6;
                count = 1;
                state = TRANSITION_STATE.TRANSIN;
            }
            else if (state == TRANSITION_STATE.TRANSIN) {
                for (let n = 0; n < 20; n++) {
                    let lastX = blocks[blocks.length - 1].x;
                    let lastY = blocks[blocks.length - 1].y;
                    if (dir == 6) {
                        lastX += g_pictures[0].width;
                        if (lastX >= g_App.canvas.width - g_pictures[0].width * count) {
                            dir = 2;
                        }
                    }
                    else if (dir == 2) {
                        lastY += g_pictures[0].height;
                        if (lastY >= g_App.canvas.height - g_pictures[0].height * count) {
                            dir = 4;
                        }
                    }
                    else if (dir == 4) {
                        lastX -= g_pictures[0].width;
                        if (lastX <= g_pictures[0].width * (count - 1)) {
                            dir = 8;
                        }
                    }
                    else if (dir == 8) {
                        lastY -= g_pictures[0].height;
                        if (lastY <= g_pictures[0].height * count) {
                            count++;
                            dir = 6;
                        }
                    }
                    blocks.push(Point(lastX, lastY));
                }
                if (g_pictures[0].height * (count + 1) > g_App.canvas.height) {
                    state = TRANSITION_STATE.WAITING;
                }
            }
            else if (state == TRANSITION_STATE.WAITING) {
                if (waiting == false)
                    state = TRANSITION_STATE.TRANSOUT;
            }
            else if (state == TRANSITION_STATE.TRANSOUT) {
                for (const i of blocks) {
                    g_App.drawFrame(i.x, i.y, g_pictures[0]);
                }
                for (let n = 0; n < 20; n++) {
                    blocks.pop();
                    if (blocks.length == 0)
                        state = TRANSITION_STATE.DONE;
                }
            }
            for (const i of blocks) {
                g_App.drawFrame(i.x, i.y, g_pictures[0]);
            }
            return state;
        };
    }
    doBMPFade(after) {
        let x = 0;
        assert(this.m_pictures);
        const g_pictures = this.m_pictures.rectData;
        let waiting = true;
        after.then(() => waiting = false).catch(() => waiting = false);
        return (state) => {
            if (state == TRANSITION_STATE.INIT) {
                x = -640 - g_pictures[1].width;
                state = TRANSITION_STATE.TRANSIN;
            }
            else if (state == TRANSITION_STATE.TRANSIN) {
                if (x >= 0) {
                    x = -g_pictures[2].width;
                    state = TRANSITION_STATE.WAITING;
                }
                x += 20;
            }
            else if (state == TRANSITION_STATE.WAITING) {
                if (waiting == false)
                    state = TRANSITION_STATE.TRANSOUT;
            }
            else if (state == TRANSITION_STATE.TRANSOUT) {
                g_App.drawRect(x + g_pictures[2].width, 0, x + g_pictures[2].width + 640, 480, "black");
                for (let y = 0; y < 480; y += g_pictures[2].height) {
                    g_App.drawFrame(x, y, g_pictures[2]);
                }
                if (x >= 640)
                    state = TRANSITION_STATE.DONE;
                x += 20;
            }
            g_App.drawRect(x, 0, x + 640, 480, "black");
            for (let y = 0; y < 480; y += g_pictures[1].height) {
                g_App.drawFrame(x + 640, y, g_pictures[1]);
            }
            return state;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,