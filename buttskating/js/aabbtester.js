import { assert } from "./assert.js";
import { Bucket } from "./bucket.js";
export class AABBTester {
    constructor() {
        this.m_colSet = [];
        this.m_bucketX = new Bucket();
        this.m_bucketY = new Bucket();
    }
    addObj(pObj) {
        assert(pObj);
        assert(pObj.m_size.x > 0 && pObj.m_size.y > 0);
        let out0, out1;
        [this.m_colSet, out0, out1] =
            this.m_bucketX.addItem(this.m_colSet, pObj, pObj.m_pos.x, pObj.m_pos.x + pObj.m_size.x);
        let out2, out3;
        [this.m_colSet, out2, out3] =
            this.m_bucketY.addItem(this.m_colSet, pObj, pObj.m_pos.y, pObj.m_pos.y + pObj.m_size.y);
        return [out0, out1, out2, out3];
    }
    removeObj(outRec) {
        this.m_colSet = this.m_bucketX.removeItem(this.m_colSet, outRec[0]);
        this.m_colSet = this.m_bucketX.removeItem(this.m_colSet, outRec[1]);
        this.m_colSet = this.m_bucketY.removeItem(this.m_colSet, outRec[2]);
        this.m_colSet = this.m_bucketY.removeItem(this.m_colSet, outRec[3]);
    }
    moveObj(pObj, amt, rec) {
        assert(pObj);
        assert(pObj.m_size.x > 0 && pObj.m_size.y > 0);
        this.m_colSet = this.m_bucketX.moveItem(this.m_colSet, rec[0], amt.x);
        this.m_colSet = this.m_bucketX.moveItem(this.m_colSet, rec[1], amt.x);
        this.m_colSet = this.m_bucketY.moveItem(this.m_colSet, rec[2], amt.y);
        this.m_colSet = this.m_bucketY.moveItem(this.m_colSet, rec[3], amt.y);
    }
    getColSet() { return this.m_colSet; }
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWFiYnRlc3Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2FhYmJ0ZXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsTUFBTSxFQUFrQixNQUFNLGFBQWEsQ0FBQTtBQUlwRCxNQUFNLE9BQU8sVUFBVTtJQUN0QjtRQXlDUSxhQUFRLEdBQUcsRUFBNEIsQ0FBQTtRQXhDNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFBO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQTtJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQWdCO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFOUMsSUFBSSxJQUFJLEVBQUUsSUFBSSxDQUFBO1FBQ2YsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7WUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUV6RixJQUFJLElBQUksRUFBRSxJQUFJLENBQUE7UUFDZixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXpGLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQWdGO1FBQ3pGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsT0FBTyxDQUFDLElBQWdCLEVBQUUsR0FBVyxFQUM3QixHQUE2RTtRQUVwRixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRixTQUFTLEtBQXNDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Q0FNdEU7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSBcIi4vYXNzZXJ0LmpzXCJcbmltcG9ydCB7IEJ1Y2tldCwgc0NvbGxpZGUsIHNSZWMgfSBmcm9tIFwiLi9idWNrZXQuanNcIlxuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gXCIuL2dhbWVvYmplY3QuanNcIlxuaW1wb3J0IHsgUG9pbnQyIH0gZnJvbSBcIi4vcG9pbnQyLmpzXCJcblxuZXhwb3J0IGNsYXNzIEFBQkJUZXN0ZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1fYnVja2V0WCA9IG5ldyBCdWNrZXQoKVxuICAgIHRoaXMubV9idWNrZXRZID0gbmV3IEJ1Y2tldCgpXG4gIH1cblxuICBhZGRPYmoocE9iajogR2FtZU9iamVjdCk6IFtzUmVjPEdhbWVPYmplY3Q+LCBzUmVjPEdhbWVPYmplY3Q+LCBzUmVjPEdhbWVPYmplY3Q+LCBzUmVjPEdhbWVPYmplY3Q+XSB7XG5cdCAgYXNzZXJ0KHBPYmopXG5cdCAgYXNzZXJ0KHBPYmoubV9zaXplLnggPiAwICYmIHBPYmoubV9zaXplLnkgPiAwKTtcblxuICAgIGxldCBvdXQwLCBvdXQxXG5cdCAgW3RoaXMubV9jb2xTZXQsIG91dDAsIG91dDFdID1cbiAgICAgIHRoaXMubV9idWNrZXRYLmFkZEl0ZW0odGhpcy5tX2NvbFNldCwgcE9iaiwgcE9iai5tX3Bvcy54LCBwT2JqLm1fcG9zLnggKyBwT2JqLm1fc2l6ZS54KVxuICAgIFxuICAgIGxldCBvdXQyLCBvdXQzXG5cdCAgW3RoaXMubV9jb2xTZXQsIG91dDIsIG91dDNdID1cbiAgICAgIHRoaXMubV9idWNrZXRZLmFkZEl0ZW0odGhpcy5tX2NvbFNldCwgcE9iaiwgcE9iai5tX3Bvcy55LCBwT2JqLm1fcG9zLnkgKyBwT2JqLm1fc2l6ZS55KVxuICAgIFxuICAgIHJldHVybiBbb3V0MCwgb3V0MSwgb3V0Miwgb3V0M11cbiAgfVxuXG4gIHJlbW92ZU9iaihvdXRSZWM6IFtzUmVjPEdhbWVPYmplY3Q+LCBzUmVjPEdhbWVPYmplY3Q+LCBzUmVjPEdhbWVPYmplY3Q+LCBzUmVjPEdhbWVPYmplY3Q+XSkge1xuXHQgIHRoaXMubV9jb2xTZXQgPSB0aGlzLm1fYnVja2V0WC5yZW1vdmVJdGVtKHRoaXMubV9jb2xTZXQsIG91dFJlY1swXSk7XG5cdCAgdGhpcy5tX2NvbFNldCA9IHRoaXMubV9idWNrZXRYLnJlbW92ZUl0ZW0odGhpcy5tX2NvbFNldCwgb3V0UmVjWzFdKTtcblx0ICB0aGlzLm1fY29sU2V0ID0gdGhpcy5tX2J1Y2tldFkucmVtb3ZlSXRlbSh0aGlzLm1fY29sU2V0LCBvdXRSZWNbMl0pO1xuXHQgIHRoaXMubV9jb2xTZXQgPSB0aGlzLm1fYnVja2V0WS5yZW1vdmVJdGVtKHRoaXMubV9jb2xTZXQsIG91dFJlY1szXSk7XG4gIH1cblxuICBtb3ZlT2JqKHBPYmo6IEdhbWVPYmplY3QsIGFtdDogUG9pbnQyLFxuICAgICAgICAgIHJlYzogW3NSZWM8R2FtZU9iamVjdD4sIHNSZWM8R2FtZU9iamVjdD4sIHNSZWM8R2FtZU9iamVjdD4sIHNSZWM8R2FtZU9iamVjdD5dKSB7XG4gICAgXG5cdCAgYXNzZXJ0KHBPYmopO1xuXHQgIGFzc2VydChwT2JqLm1fc2l6ZS54ID4gMCAmJiBwT2JqLm1fc2l6ZS55ID4gMCk7XG5cblx0ICB0aGlzLm1fY29sU2V0ID0gdGhpcy5tX2J1Y2tldFgubW92ZUl0ZW0odGhpcy5tX2NvbFNldCwgcmVjWzBdLCBhbXQueCk7XG5cdCAgdGhpcy5tX2NvbFNldCA9IHRoaXMubV9idWNrZXRYLm1vdmVJdGVtKHRoaXMubV9jb2xTZXQsIHJlY1sxXSwgYW10LngpO1xuXHQgIHRoaXMubV9jb2xTZXQgPSB0aGlzLm1fYnVja2V0WS5tb3ZlSXRlbSh0aGlzLm1fY29sU2V0LCByZWNbMl0sIGFtdC55KTtcblx0ICB0aGlzLm1fY29sU2V0ID0gdGhpcy5tX2J1Y2tldFkubW92ZUl0ZW0odGhpcy5tX2NvbFNldCwgcmVjWzNdLCBhbXQueSk7XG4gIH1cblxuXHRnZXRDb2xTZXQoKTogcmVhZG9ubHkgc0NvbGxpZGU8R2FtZU9iamVjdD5bXSB7IHJldHVybiB0aGlzLm1fY29sU2V0OyB9XG5cblx0cHJpdmF0ZSBtX2NvbFNldCA9IFtdIGFzIHNDb2xsaWRlPEdhbWVPYmplY3Q+W11cblxuXHRwcml2YXRlIG1fYnVja2V0WDogQnVja2V0PEdhbWVPYmplY3Q+XG5cdHByaXZhdGUgbV9idWNrZXRZOiBCdWNrZXQ8R2FtZU9iamVjdD5cbn07XG4iXX0=