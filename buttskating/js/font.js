var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Pic } from "./pic.js";
import { g_App } from "./app.js";
export var EFonts;
(function (EFonts) {
    EFonts[EFonts["FONT_SYSTEM"] = 0] = "FONT_SYSTEM";
    EFonts[EFonts["NUM_FONTS"] = 1] = "NUM_FONTS";
})(EFonts || (EFonts = {}));
export class Fonts {
    constructor() {
        this.m_fonts = new Array(EFonts.NUM_FONTS);
        this.m_widths = new Array(EFonts.NUM_FONTS);
        this.m_heights = new Array(EFonts.NUM_FONTS);
        this.wobble1 = 0;
        this.wobble2 = 0;
    }
    getWidth(font) { return this.m_widths[font]; }
    getHeight(font) { return this.m_heights[font]; }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.m_fonts[EFonts.FONT_SYSTEM] = yield Pic.load("media/font.png");
            this.m_widths[EFonts.FONT_SYSTEM] = 24;
            this.m_heights[EFonts.FONT_SYSTEM] = 24;
        });
    }
    // write
    write(str, x, y, font = EFonts.FONT_SYSTEM) {
        const cols = Math.floor(this.m_fonts[font].width / this.m_widths[font]);
        for (let i = 0; i < str.length; i++) {
            const ch = str.charCodeAt(i) - ' '.charCodeAt(0);
            const ix = (1 + this.m_widths[font] * (ch % cols) + (ch % cols));
            const iy = (1 + this.m_heights[font] * Math.floor(ch / cols) + Math.floor(ch / cols));
            g_App.ctxCanvas.drawImage(this.m_fonts[font].img, ix, iy, this.m_widths[font], this.m_heights[font], x, y, this.m_widths[font], this.m_heights[font]);
            x += this.m_widths[font];
        }
    }
    wobbly(str, x, y, font) {
        const cols = Math.floor(this.m_fonts[font].width / this.m_widths[font]);
        for (let i = 0; i < str.length; i++) {
            const ch = str.charCodeAt(i) - ' '.charCodeAt(0);
            const ix = (1 + this.m_widths[font] * (ch % cols) + (ch % cols));
            const iy = (1 + this.m_heights[font] * Math.floor(ch / cols) + Math.floor(ch / cols));
            g_App.ctxCanvas.drawImage(this.m_fonts[font].img, ix, iy, this.m_widths[font], this.m_heights[font], x - g_App.Sin(this.wobble1) * 2 + g_App.Sin(this.wobble1) * 8, y - g_App.Cos(this.wobble2) * 2 + g_App.Cos(this.wobble2) * 8, this.m_widths[font] + g_App.Sin(this.wobble1) * 2 + g_App.Sin(this.wobble1) * 8, this.m_heights[font] + g_App.Cos(this.wobble2) * 2 + g_App.Cos(this.wobble2) * 8);
            x += this.m_widths[font];
            this.wobble1 += g_App.frand() * 10;
            this.wobble2 += g_App.frand() * 10;
            if (this.wobble1 >= g_App.SINNUM)
                this.wobble1 = 0;
            if (this.wobble2 >= g_App.SINNUM)
                this.wobble2 = 0;
        }
    }
    writeF(val, x, y, font) {
        this.write(val.toString(), x, y, font);
    }
}
//# sourceMappingURL=data:application/json;base64,