import { assert } from "./assert.js";
import { Bucket } from "./bucket.js";
import { CMap, sMapPart } from "./map.js";
import { Point } from "./point2.js";
import { g_App } from "./app.js";
export class MapTester {
    constructor() {
        this.m_colTest = [];
        this.m_colList = [];
        this.m_oldCamPos = Point(0, 0);
        this.m_camPart = new Map();
        this.m_bucketX = new Map();
        this.m_bucketY = new Map();
    }
    addObj(pObj) {
        assert(pObj);
        assert(pObj.w > 0 && pObj.h > 0);
        if (this.m_bucketX.get(pObj.layer) === undefined) {
            this.m_bucketX.set(pObj.layer, new Bucket());
            this.m_bucketY.set(pObj.layer, new Bucket());
            this.startCameraLayer(pObj.layer);
        }
        const newx = CMap.layerScale(pObj.x, pObj.layer);
        const newy = CMap.layerScale(pObj.y, pObj.layer);
        [this.m_colTest, pObj.colRec[0], pObj.colRec[1]] =
            this.m_bucketX.get(pObj.layer).addItem(this.m_colTest, pObj, newx, newx + pObj.width);
        [this.m_colTest, pObj.colRec[2], pObj.colRec[3]] =
            this.m_bucketY.get(pObj.layer).addItem(this.m_colTest, pObj, newy, newy + pObj.height);
        this.updateCollisions();
    }
    removeObj(pObj) {
        const pBucketX = this.m_bucketX.get(pObj.layer);
        assert(pBucketX);
        const pBucketY = this.m_bucketY.get(pObj.layer);
        assert(pBucketY);
        assert(pObj.colRec[0]);
        assert(pObj.colRec[1]);
        assert(pObj.colRec[2]);
        assert(pObj.colRec[3]);
        this.m_colTest = pBucketX.removeItem(this.m_colTest, pObj.colRec[0]);
        this.m_colTest = pBucketX.removeItem(this.m_colTest, pObj.colRec[1]);
        this.m_colTest = pBucketY.removeItem(this.m_colTest, pObj.colRec[2]);
        this.m_colTest = pBucketY.removeItem(this.m_colTest, pObj.colRec[3]);
        this.updateCollisions();
    }
    setCam(pos) {
        if (!this.m_oldCamPos.equals(pos)) {
            for (const key of this.m_bucketX.keys()) {
                const bx = this.m_bucketX.get(key);
                assert(bx);
                const by = this.m_bucketY.get(key);
                assert(by);
                const pPart = this.m_camPart.get(key);
                assert(pPart);
                const newPos = Point(CMap.layerScale(pos.x, key), CMap.layerScale(pos.y, key));
                const amt = newPos.minus(Point(pPart.x, pPart.y));
                assert(pPart.colRec[0]);
                assert(pPart.colRec[1]);
                assert(pPart.colRec[2]);
                assert(pPart.colRec[3]);
                this.m_colTest = bx.moveItem(this.m_colTest, pPart.colRec[0], amt.x);
                this.m_colTest = bx.moveItem(this.m_colTest, pPart.colRec[1], amt.x);
                this.m_colTest = by.moveItem(this.m_colTest, pPart.colRec[2], amt.y);
                this.m_colTest = by.moveItem(this.m_colTest, pPart.colRec[3], amt.y);
                pPart.x += amt.x;
                pPart.y += amt.y;
            }
            this.updateCollisions();
        }
        this.m_oldCamPos = pos;
    }
    clear() {
        this.m_bucketX = new Map();
        this.m_bucketY = new Map();
        this.m_camPart = new Map();
        this.m_colList.length = 0;
    }
    getColList() { return this.m_colList; }
    startCamera() {
        for (const layer of this.m_bucketX.keys()) {
            this.startCameraLayer(layer);
        }
        this.updateCollisions();
    }
    startCameraLayer(layer) {
        if (this.m_camPart.get(layer) === undefined) {
            this.m_camPart.set(layer, new sMapPart(CMap.layerScale(g_App.m_map.m_x, layer), CMap.layerScale(g_App.m_map.m_y, layer), 0, 0, 0, 0, undefined));
        }
        const pBucketX = this.m_bucketX.get(layer);
        assert(pBucketX);
        const pBucketY = this.m_bucketY.get(layer);
        assert(pBucketY);
        const pPart = this.m_camPart.get(layer);
        assert(pPart);
        pBucketX.setGhost(pPart);
        pBucketY.setGhost(pPart);
        [this.m_colTest, pPart.colRec[0], pPart.colRec[1]] =
            pBucketX.addItem(this.m_colTest, pPart, pPart.x, pPart.x + g_App.canvas.width);
        [this.m_colTest, pPart.colRec[2], pPart.colRec[3]] =
            pBucketY.addItem(this.m_colTest, pPart, pPart.y, pPart.y + g_App.canvas.height);
    }
    stopCamera() {
        for (const [key, bx] of this.m_bucketX.entries()) {
            bx.setGhost(undefined);
            const pPart = this.m_camPart.get(key);
            assert(pPart);
            assert(pPart.colRec[0]);
            assert(pPart.colRec[1]);
            this.m_colTest = bx.removeItem(this.m_colTest, pPart.colRec[0]);
            this.m_colTest = bx.removeItem(this.m_colTest, pPart.colRec[1]);
        }
        for (const [key, by] of this.m_bucketY.entries()) {
            by.setGhost(undefined);
            const pPart = this.m_camPart.get(key);
            assert(pPart);
            assert(pPart.colRec[2]);
            assert(pPart.colRec[3]);
            this.m_colTest = by.removeItem(this.m_colTest, pPart.colRec[2]);
            this.m_colTest = by.removeItem(this.m_colTest, pPart.colRec[3]);
        }
    }
    loadBinary(stream, partMap) {
        this.clear();
        let num = stream.uint;
        // read x bucket map
        for (let i = 0; i < num; i++) {
            const bucketNum = stream.int;
            const bucket = new Bucket();
            bucket.loadBinary(stream, partMap);
            this.m_bucketX.set(bucketNum, bucket);
        }
        // read y bucket map
        num = stream.uint;
        for (let i = 0; i < num; i++) {
            const bucketNum = stream.int;
            const bucket = new Bucket();
            bucket.loadBinary(stream, partMap);
            this.m_bucketY.set(bucketNum, bucket);
        }
        this.startCamera();
    }
    save() { throw ("Not implemented"); }
    updateCollisions() {
        // update collision set
        // a collision is indicated by 2 identical entries (x and y)
        this.m_colList.length = 0;
        for (const i of this.m_colTest) {
            if (i.bucketID == 2) {
                this.m_colList.push(i.second);
            }
        }
        this.m_colList.sort((a, b) => a.layer - b.layer || a.order - b.order);
    }
}
;
//# sourceMappingURL=data:application/json;base64,