var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { assert } from "./assert.js";
import { Fonts } from "./font.js";
import { GameObject } from "./gameobject.js";
import { Input } from "./input.js";
import { CMap } from "./map.js";
import { Menu } from "./menu.js";
import { Point2 } from "./point2.js";
import { Sounder } from "./sounder.js";
import { Transition } from "./transition.js";
export var STATE;
(function (STATE) {
    STATE[STATE["MENU"] = 0] = "MENU";
    STATE[STATE["GAME"] = 1] = "GAME";
    STATE[STATE["MAPEDIT"] = 2] = "MAPEDIT";
    STATE[STATE["QUIT"] = 3] = "QUIT";
})(STATE || (STATE = {}));
export var g_App;
class App {
    constructor(canvas) {
        this.SINNUM = 360 * 5;
        this.fonts = new Fonts();
        this.m_pSound = new Sounder();
        this.m_debugTime = 0;
        this.m_updateTime = 0;
        this.m_sin = [];
        this.m_cos = [];
        this.m_pObjects = [];
        this.m_bRunning = false;
        this.m_bTerm = false;
        this.m_input = new Input();
        this.m_loadLev = "";
        this.m_menu = new Menu();
        this.m_transition = new Transition();
        this.totalFrames = 0;
        this.timeStart = new Date().getTime();
        this.stat = new Date().getTime();
        this.m_frameTime = 0;
        this.m_totalTime = 0;
        this.m_state = STATE.MENU;
        this.canvas = canvas;
        assert(this.canvas);
        this.ctxCanvas = this.canvas.getContext("2d", { alpha: false });
        assert(this.ctxCanvas);
        this.ctxCanvas.imageSmoothingEnabled = false;
        this.m_map = new CMap(this.ctxCanvas);
    }
    getSound() { return this.m_pSound; }
    destroy() {
        this.m_bTerm = true;
        this.m_pObjects.length = 0;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            // Init sound
            this.m_pSound = new Sounder();
            this.getSound().Init();
            if (this.getSound().error)
                throw (this.getSound().error);
            this.getSound().LoadWAV("media/menu01.wav", "MENU01");
            this.getSound().LoadWAV("media/menu02.wav", "MENU02");
            this.getSound().LoadWAV("media/misc01.wav", "MISC01");
            this.getSound().LoadWAV("media/misc02.wav", "MISC02");
            this.getSound().LoadWAV("media/misc03.wav", "MISC03");
            const promises = [];
            promises.push(GameObject.initStatic());
            // Init map
            if (this.m_state == STATE.MAPEDIT)
                promises.push(this.m_map.init(true));
            else
                promises.push(this.m_map.init(false));
            // Init fonts
            promises.push(this.fonts.init().then(() => this.fonts.write("Now loading", 0, 0)));
            // Init Sin/Cos Tables
            let f = 0;
            for (let i = 0; i < this.SINNUM; i++) {
                this.m_sin[i] = Math.sin(f);
                this.m_cos[i] = Math.cos(f);
                f += (Math.PI * 2) / this.SINNUM;
            }
            // Init transitions
            promises.push(this.m_transition.init());
            // Init Menu
            this.m_menu.addItem("Main Menu", "Start");
            this.m_menu.addItem("Main Menu", "Options");
            this.m_menu.addItem("Main Menu", "Quit");
            this.m_menu.addItem("Options", "Skill : Easy");
            this.m_menu.addItem("Options", "FX is on");
            this.m_menu.addItem("Options", "Music is on");
            this.m_menu.addItem("Options", "Back");
            this.m_menu.setMenu("Main Menu");
            // Start thread etc
            this.m_bTerm = false;
            for (const p of promises)
                yield p;
            // Load map if specified
            if (this.m_loadLev != "") {
                yield this.m_map.loadBinary(this.m_loadLev, false);
            }
            this.canvas.onkeydown = (e) => {
                this.m_input.onKeyDown(e.code);
                this.m_input.key(e.key);
                e.preventDefault();
            };
            this.canvas.onkeyup = (e) => {
                this.m_input.onKeyUp(e.code);
                e.preventDefault();
            };
            return false;
        });
    }
    Sin(entry) { return this.m_sin[Math.floor(entry)]; }
    Cos(entry) { return this.m_cos[Math.floor(entry)]; }
    update(timestamp) {
        if (this.m_bTerm) {
            return;
        }
        this.m_bRunning = true;
        // get ready for the next frame
        this.clearSurf();
        // update phase
        switch (this.m_state) {
            case STATE.MENU:
                this.m_menu.update();
                break;
            case STATE.GAME:
                if (this.m_input.bufferKey() == "KeyD")
                    this.m_map.debug = !this.m_map.debug;
                // update map
                this.m_map.update();
                // update objects
                for (let i = 0; i < this.m_pObjects.length; ++i) {
                    const obj = this.m_pObjects[i];
                    if (obj && !obj.gameUpdate()) {
                        obj.destroy();
                        delete this.m_pObjects[i];
                    }
                }
                if (this.m_input.key("Escape") && !this.m_transition.isBusy()) {
                    this.m_transition.goTransition(this.m_transition.SPIRALBLOCKS, STATE.MENU, Promise.resolve());
                }
                break;
        }
        // draw phase
        switch (this.m_state) {
            case STATE.MENU:
                this.m_menu.draw();
                break;
            case STATE.GAME:
                // prepare objects for drawing
                for (const obj of this.m_pObjects) {
                    if (obj)
                        this.m_map.queueLayerDraw(obj);
                }
                this.m_map.draw(this.ctxCanvas, 0, 999999);
                break;
        }
        this.m_transition.update();
        // print fps
        if (this.m_updateTime != 0)
            this.fonts.write("fps " + Math.floor(1000.0 / (new Date().getTime() - this.m_updateTime)), 420, 480 - 32);
        this.m_updateTime = new Date().getTime();
        this.m_totalTime += this.m_frameTime;
        this.totalFrames++;
        if (this.m_state == STATE.QUIT || this.m_input.key("F4")) {
            this.m_bTerm = true;
        }
        window.requestAnimationFrame(this.update.bind(this));
    }
    // Lock back surface
    lockBackSurf() {
        return this.canvas;
    }
    // Draw from a framerect
    drawFrame(x, y, f, scale = 1) {
        this.ctxCanvas.drawImage(f.img, f.x0, f.y0, f.width, f.height, x, y, f.width * scale, f.height * scale);
    }
    // Is point in box?
    pointBox(x, y, bx, by, bx1, by1) {
        if (x < bx || x > bx1 || y < by || y > by1)
            return false;
        return true;
    }
    // Box-box collision
    boxBox(x, y, x1, y1, xx, yy, xx1, yy1) {
        if ((x >= xx && y >= yy && x <= xx1 && y <= yy1) ||
            (x >= xx && y >= yy && x1 <= xx1 && y1 <= yy1) ||
            (x1 >= xx && y1 >= yy && x <= xx1 && y <= yy1) ||
            (x1 >= xx && y1 >= yy && x1 <= xx1 && y1 <= yy1))
            return true;
        else
            return false;
    }
    // Draw a coloured rectangle
    drawRect(x, y, x1, y1, color) {
        this.ctxCanvas.fillStyle = color;
        this.ctxCanvas.fillRect(x, y, x1 - x, y1 - y);
    }
    // Draw a line
    drawLine(x, y, x2, y2, color) {
        this.ctxCanvas.strokeStyle = color;
        this.ctxCanvas.beginPath();
        this.ctxCanvas.moveTo(x, y);
        this.ctxCanvas.lineTo(x2, y2);
        this.ctxCanvas.stroke();
    }
    // Return true if a circle of pos cx,cy and radius rad collides with the given line.
    // Gives the X and Y of the hit in hitX, hitY if non-null
    circleLine(cx, cy, rad, sx, sy, ex, ey) {
        const length = Math.sqrt((ex - sx) * (ex - sx) + (ey - sy) * (ey - sy));
        const vector = [
            (ex - sx) / length,
            (ey - sy) / length
        ];
        const dist = (vector[0] * (cx - sx)) + (vector[1] * (cy - sy));
        const newX = sx + dist * vector[0];
        const newY = sy + dist * vector[1];
        let [x1, x2, y1, y2] = [0, 0, 0, 0];
        if (sx < ex)
            x1 = sx;
        else
            x1 = ex;
        if (sy < ey)
            y1 = sy;
        else
            y1 = ey;
        if (sx > ex)
            x2 = sx;
        else
            x2 = ex;
        if (sy > ey)
            y2 = sy;
        else
            y2 = ey;
        if (this.pointBox(newX, newY, x1, y1, x2, y2)) {
            const newLength = Math.sqrt((newX - cx) * (newX - cx) + (newY - cy) * (newY - cy));
            if (newLength <= rad) {
                return new Point2(newX, newY);
            }
        }
        return undefined;
    }
    frand(begin = 0, range = 1) {
        // returns random value between 0 and 1
        // i got the magic numbers from csound so they should be ok but 
        // I haven't checked them myself
        //   -- Jeskola
        // Thanks Jeskola
        this.stat = ((this.stat * 1103515245 + 12345) & 0x7fffffff) >>> 0;
        return begin + this.stat * (range / 0x7fffffff);
    }
    irand(begin = 0, range = 1) {
        return Math.floor(this.frand(begin, range));
    }
    clearSurf() {
        this.ctxCanvas.resetTransform();
        this.ctxCanvas.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    lineLine(Ax, Ay, Bx, By, Cx, Cy, Dx, Dy) {
        let r = ((Ay - Cy) * (Dx - Cx) - (Ax - Cx) * (Dy - Cy));
        // lines are coincident
        if (r == 0)
            return true;
        let d = (Bx - Ax) * (Dy - Cy) - (By - Ay) * (Dx - Cx);
        // lines are parallel
        if (d == 0)
            return false;
        // reciprocal for speed
        d = 1.0 / d;
        r *= d;
        if (r < 0 || r > 1)
            return false;
        const s = ((Ay - Cy) * (Bx - Ax) - (Ax - Cx) * (By - Ay)) * d;
        if (s < 0 || s > 1)
            return false;
        return true;
    }
    add(obj) {
        this.m_pObjects.push(obj);
    }
    clearObjects() {
        for (const obj of this.m_pObjects)
            obj === null || obj === void 0 ? void 0 : obj.destroy();
        this.m_pObjects.length = 0;
    }
    stateChange(state) {
        this.m_state = state;
        this.m_input.bufferClear();
    }
}
document.addEventListener('DOMContentLoaded', () => __awaiter(void 0, void 0, void 0, function* () {
    g_App = new App(document.getElementById("playfield"));
    yield g_App.init();
    g_App.update(0);
}));
//# sourceMappingURL=data:application/json;base64,