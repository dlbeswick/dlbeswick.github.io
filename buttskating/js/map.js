var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as array from "./array.js";
import { assert } from "./assert.js";
import { Binstream } from "./binstream.js";
import { MapTester } from "./maptester.js";
import { Pictures } from "./pictures.js";
import { g_App } from "./app.js";
import { Point, Point2 } from "./point2.js";
import { addObjectType } from "./objects/serialize.js";
const MAP_LAYER_INC = 0.0125;
var mapType;
(function (mapType) {
    mapType[mapType["MAP_DOWN"] = 0] = "MAP_DOWN";
    mapType[mapType["MAP_DOWNRIGHT"] = 1] = "MAP_DOWNRIGHT";
    mapType[mapType["MAP_RIGHT"] = 2] = "MAP_RIGHT";
    mapType[mapType["MAP_UPRIGHT"] = 3] = "MAP_UPRIGHT";
    mapType[mapType["MAP_UP"] = 4] = "MAP_UP";
    mapType[mapType["MAP_UPLEFT"] = 5] = "MAP_UPLEFT";
    mapType[mapType["MAP_LEFT"] = 6] = "MAP_LEFT";
    mapType[mapType["MAP_DOWNLEFT"] = 7] = "MAP_DOWNLEFT";
    mapType[mapType["MAP_FLAT"] = 8] = "MAP_FLAT";
    mapType[mapType["MAP_NOFRICTION"] = 9] = "MAP_NOFRICTION";
})(mapType || (mapType = {}));
;
class sMapCollide {
    constructor(sx, sy, ex, ey, layer) {
        this.sx = sx;
        this.sy = sy;
        this.ex = ex;
        this.ey = ey;
        this.layer = layer;
    }
}
;
export class sMapPart {
    constructor(x, y, w, h, layer, type, texmap, ptex = -1) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
        this.layer = layer;
        this.type = type;
        this.colRec = [undefined, undefined, undefined, undefined];
        this.order = 0;
        if (texmap instanceof CMap) {
            assert(ptex != -1);
            this.tex = texmap.getTile(ptex);
        }
        else {
            this.tex = texmap;
        }
    }
    get width() { assert(this.tex); return this.w * this.tex.width; }
    get height() { assert(this.tex); return this.h * this.tex.height; }
    transX(pMap) { return pMap.mapXToScreen(this.x, this.layer); }
    transY(pMap) { return pMap.mapYToScreen(this.y, this.layer); }
    // test against the map's camera
    testBBox(pPart) {
        return g_App.boxBox(pPart.x, pPart.y, pPart.x + pPart.width, pPart.y + pPart.height, this.x, this.y, this.x + g_App.canvas.width, this.y + g_App.canvas.height);
    }
}
export class CMap {
    constructor(ctx) {
        this.ctx = ctx;
        this.debug = false;
        this.m_targetX = 0;
        this.m_targetY = 0;
        this.m_x = 0;
        this.m_y = 0;
        this.m_pLayerDrawRot = [];
        this.m_movePos = [0, 0];
        //TBD private void snapRegion(sMapPart *from, bool bVert);
        this.m_mapParts = []; // owner
        this.m_mapCollide = []; // owner
        this.m_splitParts = []; // point to non-owner
        this.m_splitCollide = []; // point to non-owner
        this.m_editObjects = [];
        this.m_editTileOrder = [];
        this.m_mapTester = new MapTester();
        // map extents
        this.m_minx = -9999999;
        this.m_miny = -9999999;
        this.m_splitWidth = 0;
        this.m_splitHeight = 0;
        this.m_segSizeX = 640 * 4;
        this.m_segSizeY = 480 * 4;
    }
    init(bEdit) {
        return __awaiter(this, void 0, void 0, function* () {
            this.m_x = 0;
            this.m_y = 0;
            this.m_targetX = 0;
            this.m_targetY = 0;
            this.m_movePos[0] = 0;
            this.m_movePos[1] = 0;
            // Init GFX
            // Tile coords
            this.m_pictures = yield Pictures.load("media/tiles.txt", this.ctx);
            this.m_editTileOrder = this.m_pictures.order;
            this.m_tiletypes = yield Pictures.load("media/tiletypes.txt");
            if (bEdit) {
                this.m_objecttypes = yield Pictures.load("media/objecttypes.txt");
            }
        });
    }
    drawObj(ctx, o) {
        this.resetTransform(ctx);
        ctx.translate(-this.m_x, -this.m_y);
        o.draw(this.ctx);
    }
    resetTransform(ctx) {
        ctx.resetTransform();
        if (this.debug) {
            ctx.translate((640 - 640 * 0.25) / 2, (480 - 480 * 0.25) / 2);
            ctx.scale(0.25, 0.25);
            ctx.strokeStyle = "red";
            ctx.strokeRect(0, 0, 640, 480);
        }
    }
    draw(ctx, startLayer, endLayer) {
        let i = 0;
        let q = 0;
        assert(startLayer >= 0);
        while (q != this.m_mapTester.getColList().length && this.m_mapTester.getColList()[q].layer < startLayer)
            q++;
        let lastLayer = 0;
        for (; q < this.m_mapTester.getColList().length; q++) {
            const m = this.m_mapTester.getColList()[q];
            if (m.layer == endLayer)
                return;
            const f = m.tex;
            assert(f && f.pattern);
            this.resetTransform(ctx);
            ctx.fillStyle = f.pattern;
            const wx = this.mapXToScreen(m.x, m.layer);
            const wy = this.mapYToScreen(m.y, m.layer);
            f.pattern.setTransform(new DOMMatrix().translate(wx, wy));
            ctx.fillRect(wx, wy, m.width, m.height);
            // Now draw objects that are 'layered' if the layer has changed
            if (lastLayer != m.layer) {
                lastLayer = m.layer;
                ctx.fillStyle = "none";
                for (const i in this.m_pLayerDrawRot) {
                    const obj = this.m_pLayerDrawRot[i];
                    if (obj.m_layer == lastLayer) {
                        this.drawObj(ctx, obj);
                        delete this.m_pLayerDrawRot[i];
                    }
                }
            }
        }
        // Draw any leftover layer objects
        for (const o of this.m_pLayerDrawRot) {
            if (o) {
                this.drawObj(ctx, o);
            }
        }
        this.m_pLayerDrawRot.length = 0;
        ctx.resetTransform();
    }
    update() {
        let inc = (this.m_targetX - this.m_movePos[0]) * 0.25;
        this.m_movePos[0] += inc;
        inc = (this.m_targetY - this.m_movePos[1]) * 0.25;
        this.m_movePos[1] += inc;
        this.m_x = this.m_movePos[0];
        this.m_y = this.m_movePos[1];
        this.m_mapTester.setCam(Point(this.m_x, this.m_y));
    }
    queueLayerDraw(obj) { this.m_pLayerDrawRot.push(obj); }
    addPart(part) {
        part.order = 9999999;
        // insert by layer
        let i = 0;
        for (; i != this.m_mapParts.length; ++i) {
            if (this.m_mapParts[i].layer >= part.layer)
                break;
        }
        for (; i != this.m_mapParts.length; ++i) {
            if (this.m_mapParts[i].layer != part.layer) {
                break;
            }
        }
        this.m_mapParts = array.insertAt(this.m_mapParts, i, part);
        if (i != 0) {
            part.order = this.m_mapParts[i - 1].order;
            for (i = ++i; i != this.m_mapParts.length; ++i) {
                ++(this.m_mapParts[i].order);
            }
        }
        else {
            part.order = 0;
        }
        this.m_mapTester.addObj(part);
    }
    removePart(part) {
        // insert by layer
        this.m_mapParts = array.remove(this.m_mapParts, part);
        this.m_mapTester.removeObj(part);
    }
    partAt(x, y, layer = -1) {
        let list;
        if (this.m_splitParts.length != 0) {
            const [xPart, yPart] = this.pointToSegment(x, y);
            if (xPart < 0 || yPart < 0 || xPart >= this.m_splitWidth || yPart >= this.m_splitWidth)
                return undefined;
            list = this.m_splitParts[xPart + yPart * this.m_splitWidth];
        }
        else {
            list = this.m_mapParts;
        }
        for (const m of list) {
            if (layer != -1)
                if (layer != m.layer)
                    continue;
            assert(m.tex);
            if (x >= m.x && x <= m.x + m.w * m.tex.width &&
                y >= m.y && y <= m.y + m.h * m.tex.height)
                return m;
        }
        return undefined;
    }
    getTile(index) { assert(this.m_pictures); return this.m_pictures.getFrame(index); }
    loadBinary(url, bObjects = false) {
        return __awaiter(this, void 0, void 0, function* () {
            assert(this.m_pictures != undefined);
            const stream = yield fetch(url)
                .then(response => {
                if (response.ok)
                    return response.blob();
                else
                    throw (response.statusText);
            })
                .then(blob => blob.arrayBuffer())
                .then(buf => new Binstream(new DataView(buf)))
                .catch(e => { throw (`Failed to load map ${url}: ${e}`); });
            g_App.m_loadLev = url;
            // free old map data
            this.m_mapParts.length = 0;
            this.m_mapCollide.length = 0;
            this.m_editObjects.length = 0;
            this.m_splitParts.length = 0;
            this.m_splitCollide.length = 0;
            g_App.clearObjects();
            const version = stream.int;
            const partPointerMap = new Map();
            let size = stream.uint;
            for (let i = 0; i < size; i++) {
                const m = new sMapPart(stream.int, stream.int, stream.int, stream.int, stream.int, stream.int, undefined);
                const texNum = stream.int;
                if (texNum > -1)
                    m.tex = this.m_pictures.getFrame(texNum);
                m.order = i;
                const pOldPointer = stream.int;
                partPointerMap.set(pOldPointer, m);
                if (m.w > 0 && m.h > 0) {
                    this.m_mapParts.push(m);
                }
            }
            // Read collision data
            size = stream.uint;
            for (let i = 0; i < size; i++) {
                this.m_mapCollide.push(new sMapCollide(stream.int, stream.int, stream.int, stream.int, stream.int));
            }
            // Read object data
            size = stream.uint;
            for (let i = 0; i < size; i++) {
                const o = new sMapPart(stream.int, stream.int, 0, 0, stream.int, stream.int, undefined);
                if (!bObjects) {
                    this.m_editObjects.push(o);
                }
                else {
                    addObjectType(o.type, o.x, o.y, o.layer);
                }
            }
            this.m_mapTester.loadBinary(stream, partPointerMap);
        });
    }
    affectObject(obj) {
        const mapOver = this.partAt(obj.m_pos.x, obj.m_pos.y);
        if (!mapOver) {
            return undefined;
        }
        let frictionVec = new Point2();
        switch (mapOver.type) {
            case mapType.MAP_DOWN:
                frictionVec.x = 0.0;
                frictionVec.y = 1.0;
                break;
            case mapType.MAP_DOWNRIGHT:
                frictionVec.x = 0.5;
                frictionVec.y = 0.5;
                break;
            case mapType.MAP_RIGHT:
                frictionVec.x = 1.0;
                frictionVec.y = 0.0;
                break;
            case mapType.MAP_UPRIGHT:
                frictionVec.x = 0.5;
                frictionVec.y = -0.5;
                break;
            case mapType.MAP_UP:
                frictionVec.x = 0.0;
                frictionVec.y = -1.0;
                break;
            case mapType.MAP_UPLEFT:
                frictionVec.x = -0.5;
                frictionVec.y = -0.5;
                break;
            case mapType.MAP_LEFT:
                frictionVec.x = -1.0;
                frictionVec.y = 0.0;
                break;
            case mapType.MAP_DOWNLEFT:
                frictionVec.x = -0.5;
                frictionVec.y = 0.5;
                break;
        }
        if (mapOver.type != mapType.MAP_NOFRICTION) {
            obj.m_speed += obj.m_vel.dot(frictionVec) * 0.05;
            if (obj.m_speed > 0) {
                obj.m_speed -= 0.01;
                if (obj.m_speed < 0)
                    obj.m_speed = 0;
            }
            else if (obj.m_speed < 0) {
                obj.m_speed += 0.01;
                if (obj.m_speed > 0)
                    obj.m_speed = 0;
            }
        }
        return mapOver;
    }
    hitTestObject(obj) {
        const [xPart, yPart] = this.pointToSegment(obj.m_pos.x, obj.m_pos.y);
        if (xPart >= this.m_splitWidth || yPart >= this.m_splitHeight || xPart < 0 || yPart < 0)
            return;
        const index = xPart + yPart * this.m_splitWidth;
        for (const c of this.m_splitCollide[index]) {
            if (c.layer != obj.m_layer)
                continue;
            if (obj.gameMapHit(c.sx, c.sy, c.ex, c.ey))
                break;
        }
    }
    getCollideLines(x, y, rad) {
        return this.m_mapCollide;
    }
    mapXToScreen(x, layer) {
        return (x - this.m_x) * (1.0 + (layer * MAP_LAYER_INC));
    }
    mapYToScreen(y, layer) {
        return (y - this.m_y) * (1.0 + (layer * MAP_LAYER_INC));
    }
    static layerScale(val, layer) {
        return val * (1.0 + (layer * MAP_LAYER_INC));
    }
    pointToSegment(x, y) {
        return [(x - this.m_minx) / this.m_segSizeX, (y - this.m_miny) / this.m_segSizeY];
    }
    save() { throw ("Not implemented"); }
}
;
//# sourceMappingURL=data:application/json;base64,