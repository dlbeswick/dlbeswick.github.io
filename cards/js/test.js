/*
 * Copyright (c) 2021 David Beswick.
 *
 * This file is part of cards-mp
 * (see https://github.com/dlbeswick/cards-mp).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
import { GameGinRummy, MoveCards } from "./game.js";
import { Gameplay, Turn } from "./turn.js";
export function test() {
    const gp = new Gameplay();
    gp.newGame([new Turn(new GameGinRummy(() => { }).playfield(2), 0, [])]);
    const stock = gp.playfield.containerCard("stock").first();
    const p0 = gp.playfield.containerCard("p0").first();
    const p1 = gp.playfield.containerCard("p1").first();
    const waste = gp.playfield.containerCard("waste").first();
    const card = stock.top();
    gp.integrateMove(new MoveCards(gp.turnCurrent.sequence, [card], stock.id, waste.id, undefined, [], 1));
    console.debug("After move 0", gp.turns);
    gp.integrateMove(new MoveCards(gp.turnCurrent.sequence, [card], waste.id, p1.id, undefined, [], 2));
    console.debug("After move 1", gp.turns);
    gp.integrateMove(new MoveCards(gp.turnCurrent.sequence, [card], p1.id, p0.id, undefined, [], 3));
    console.debug("After move 2", gp.turns);
    gp.integrateMove(new MoveCards(0, [card], stock.id, p1.id, undefined, [], 0));
    console.debug("After conflict", gp.turns);
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRTFDLE1BQU0sVUFBVSxJQUFJO0lBQ2xCLE1BQU0sRUFBRSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUE7SUFDekIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3RFLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3pELE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ25ELE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ25ELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3pELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUN4QixFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN0RyxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdkMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDbkcsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3ZDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2hHLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN2QyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDN0UsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDekMsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAyMSBEYXZpZCBCZXN3aWNrLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNhcmRzLW1wIFxuICogKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGxiZXN3aWNrL2NhcmRzLW1wKS5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cbmltcG9ydCB7IEdhbWVHaW5SdW1teSwgTW92ZUNhcmRzIH0gZnJvbSBcIi4vZ2FtZS5qc1wiXG5pbXBvcnQgeyBHYW1lcGxheSwgVHVybiB9IGZyb20gXCIuL3R1cm4uanNcIlxuXG5leHBvcnQgZnVuY3Rpb24gdGVzdCgpIHtcbiAgY29uc3QgZ3AgPSBuZXcgR2FtZXBsYXkoKVxuICBncC5uZXdHYW1lKFtuZXcgVHVybihuZXcgR2FtZUdpblJ1bW15KCgpID0+IHt9KS5wbGF5ZmllbGQoMiksIDAsIFtdKV0pXG4gIGNvbnN0IHN0b2NrID0gZ3AucGxheWZpZWxkLmNvbnRhaW5lckNhcmQoXCJzdG9ja1wiKS5maXJzdCgpXG4gIGNvbnN0IHAwID0gZ3AucGxheWZpZWxkLmNvbnRhaW5lckNhcmQoXCJwMFwiKS5maXJzdCgpXG4gIGNvbnN0IHAxID0gZ3AucGxheWZpZWxkLmNvbnRhaW5lckNhcmQoXCJwMVwiKS5maXJzdCgpXG4gIGNvbnN0IHdhc3RlID0gZ3AucGxheWZpZWxkLmNvbnRhaW5lckNhcmQoXCJ3YXN0ZVwiKS5maXJzdCgpXG4gIGNvbnN0IGNhcmQgPSBzdG9jay50b3AoKVxuICBncC5pbnRlZ3JhdGVNb3ZlKG5ldyBNb3ZlQ2FyZHMoZ3AudHVybkN1cnJlbnQuc2VxdWVuY2UsIFtjYXJkXSwgc3RvY2suaWQsIHdhc3RlLmlkLCB1bmRlZmluZWQsIFtdLCAxKSlcbiAgY29uc29sZS5kZWJ1ZyhcIkFmdGVyIG1vdmUgMFwiLCBncC50dXJucylcbiAgZ3AuaW50ZWdyYXRlTW92ZShuZXcgTW92ZUNhcmRzKGdwLnR1cm5DdXJyZW50LnNlcXVlbmNlLCBbY2FyZF0sIHdhc3RlLmlkLCBwMS5pZCwgdW5kZWZpbmVkLCBbXSwgMikpXG4gIGNvbnNvbGUuZGVidWcoXCJBZnRlciBtb3ZlIDFcIiwgZ3AudHVybnMpXG4gIGdwLmludGVncmF0ZU1vdmUobmV3IE1vdmVDYXJkcyhncC50dXJuQ3VycmVudC5zZXF1ZW5jZSwgW2NhcmRdLCBwMS5pZCwgcDAuaWQsIHVuZGVmaW5lZCwgW10sIDMpKVxuICBjb25zb2xlLmRlYnVnKFwiQWZ0ZXIgbW92ZSAyXCIsIGdwLnR1cm5zKVxuICBncC5pbnRlZ3JhdGVNb3ZlKG5ldyBNb3ZlQ2FyZHMoMCwgW2NhcmRdLCBzdG9jay5pZCwgcDEuaWQsIHVuZGVmaW5lZCwgW10sIDApKVxuICBjb25zb2xlLmRlYnVnKFwiQWZ0ZXIgY29uZmxpY3RcIiwgZ3AudHVybnMpXG4gIHJldHVybiB0cnVlXG59XG4iXX0=